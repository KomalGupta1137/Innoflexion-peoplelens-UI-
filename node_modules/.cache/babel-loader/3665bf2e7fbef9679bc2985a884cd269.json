{"ast":null,"code":"var _jsxFileName = \"/home/komal/Documents/Backup/FrontEnd/peoplelens_ui/src/components/atoms/RepProgressBar/index.tsx\";\n\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport React from 'react';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { createStyles, withStyles } from '@material-ui/core';\nimport { RepComparisonProperties } from '../../molecules/RepComparisonSalesOutcome/RepComparisonProperties';\nimport { COLORS } from '../../../plTheme'; // import { BorderLinearProgressBar } from '../ProgressBarExports';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RepProgressBar = ({\n  value,\n  type,\n  maxValue,\n  minValue\n}) => {\n  let barBackgroundColor = '';\n  let amountValuetoPercentage = 0;\n\n  if (type === 'amount') {\n    if (value && value < minValue) {\n      barBackgroundColor = COLORS.AVATARS_RED_2;\n    } else if (value && value >= RepComparisonProperties.amount.positiveValue) {\n      barBackgroundColor = COLORS.SUCCESS_PRESSED;\n    } else {\n      barBackgroundColor = COLORS.TERTIARY_COLOR_ORANGE;\n    }\n\n    if (value) {\n      if (maxValue && maxValue != 0) {\n        amountValuetoPercentage = Math.round(value / maxValue * 100);\n      }\n    }\n\n    value = amountValuetoPercentage;\n  } else if (type === 'dealSizeAmount') {\n    if (value && value < minValue) {\n      barBackgroundColor = COLORS.AVATARS_RED_2;\n    } else if (value && value >= maxValue) {\n      barBackgroundColor = COLORS.SUCCESS_PRESSED;\n    } else {\n      barBackgroundColor = COLORS.TERTIARY_COLOR_ORANGE;\n    }\n\n    if (value) {\n      if (maxValue && maxValue != 0) {\n        amountValuetoPercentage = Math.round(value / maxValue * 100);\n      }\n    }\n\n    value = amountValuetoPercentage;\n  } else if (type === 'percentage') {\n    if (value && value < minValue) {\n      barBackgroundColor = COLORS.AVATARS_RED_2;\n    } else if (value && value >= maxValue) {\n      barBackgroundColor = COLORS.SUCCESS_PRESSED;\n    } else {\n      barBackgroundColor = COLORS.TERTIARY_COLOR_ORANGE;\n    }\n\n    if (value) {\n      if (maxValue && maxValue != 0) {\n        amountValuetoPercentage = Math.round(value / maxValue * 100);\n      }\n    }\n\n    value = amountValuetoPercentage;\n  } else if (type === 'winRatePercentage') {\n    if (value && value < minValue) {\n      barBackgroundColor = COLORS.AVATARS_RED_2;\n    } else if (value && value >= maxValue) {\n      barBackgroundColor = COLORS.SUCCESS_PRESSED;\n    } else {\n      barBackgroundColor = COLORS.TERTIARY_COLOR_ORANGE;\n    }\n  } else if (type === 'dealsClosed') {\n    if (value && value < minValue) {\n      barBackgroundColor = COLORS.AVATARS_RED_2;\n    } else if (value && value >= maxValue) {\n      barBackgroundColor = COLORS.SUCCESS_PRESSED;\n    } else {\n      barBackgroundColor = COLORS.TERTIARY_COLOR_ORANGE;\n    }\n\n    if (value) {\n      if (maxValue && maxValue != 0) {\n        amountValuetoPercentage = Math.round(value / maxValue * 100);\n      }\n    }\n\n    value = amountValuetoPercentage;\n  } else if (type === 'days') {\n    if (value && value >= maxValue) {\n      barBackgroundColor = COLORS.AVATARS_RED_2;\n    } else if (value && value < minValue) {\n      barBackgroundColor = COLORS.SUCCESS_PRESSED;\n    } else {\n      barBackgroundColor = COLORS.TERTIARY_COLOR_ORANGE;\n    }\n\n    if (value) {\n      if (maxValue && maxValue != 0) {\n        amountValuetoPercentage = Math.round(value / maxValue * 100);\n      }\n    }\n\n    value = amountValuetoPercentage;\n  } else if (type === 'salesActivity') {\n    if (value && value < minValue) {\n      barBackgroundColor = COLORS.AVATARS_RED_2;\n    } else if (value && value >= maxValue) {\n      barBackgroundColor = COLORS.SUCCESS_PRESSED;\n    } else {\n      barBackgroundColor = COLORS.TERTIARY_COLOR_ORANGE;\n    }\n  }\n\n  const BorderLinearProgressBar = withStyles(() => createStyles({\n    root: {\n      height: '5.79px',\n      width: '150px',\n      borderRadius: 5\n    },\n    colorPrimary: {\n      backgroundColor: 'rgba(143, 146, 161, 0.2)'\n    },\n    bar: {\n      borderRadius: 5,\n      backgroundColor: `${barBackgroundColor}`\n    }\n  }))(LinearProgress);\n  return /*#__PURE__*/_jsxDEV(BorderLinearProgressBar, {\n    variant: \"determinate\",\n    value: value ? value > 100 ? value / 2 : value : 0\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n\n_c = RepProgressBar;\nexport default RepProgressBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"RepProgressBar\");","map":{"version":3,"sources":["/home/komal/Documents/Backup/FrontEnd/peoplelens_ui/src/components/atoms/RepProgressBar/index.tsx"],"names":["React","LinearProgress","createStyles","withStyles","RepComparisonProperties","COLORS","RepProgressBar","value","type","maxValue","minValue","barBackgroundColor","amountValuetoPercentage","AVATARS_RED_2","amount","positiveValue","SUCCESS_PRESSED","TERTIARY_COLOR_ORANGE","Math","round","BorderLinearProgressBar","root","height","width","borderRadius","colorPrimary","backgroundColor","bar"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport React from 'react';\n\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { createStyles, makeStyles, withStyles } from '@material-ui/core';\nimport { RepComparisonProperties } from '../../molecules/RepComparisonSalesOutcome/RepComparisonProperties';\nimport { COLORS } from '../../../plTheme';\n// import { BorderLinearProgressBar } from '../ProgressBarExports';\n\ninterface RepProgressBarProps {\n  value: number | null | undefined;\n  type: string | undefined;\n  maxValue: number | null | undefined;\n  minValue: number | null | undefined;\n}\n\nconst RepProgressBar: React.FC<RepProgressBarProps> = ({\n  value,\n  type,\n  maxValue,\n  minValue,\n}: RepProgressBarProps) => {\n  let barBackgroundColor = '';\n\n  let amountValuetoPercentage = 0;\n\n  if (type === 'amount') {\n    if (value && value < minValue!) {\n      barBackgroundColor = COLORS.AVATARS_RED_2;\n    } else if (value && value >= RepComparisonProperties.amount.positiveValue) {\n      barBackgroundColor = COLORS.SUCCESS_PRESSED;\n    } else {\n      barBackgroundColor = COLORS.TERTIARY_COLOR_ORANGE;\n    }\n    if (value) {\n      if (maxValue && maxValue != 0) {\n        amountValuetoPercentage = Math.round((value / maxValue) * 100);\n      }\n    }\n    value = amountValuetoPercentage;\n  } else if (type === 'dealSizeAmount') {\n    if (value && value < minValue!) {\n      barBackgroundColor = COLORS.AVATARS_RED_2;\n    } else if (value && value >= maxValue!) {\n      barBackgroundColor = COLORS.SUCCESS_PRESSED;\n    } else {\n      barBackgroundColor = COLORS.TERTIARY_COLOR_ORANGE;\n    }\n    if (value) {\n      if (maxValue && maxValue != 0) {\n        amountValuetoPercentage = Math.round((value / maxValue) * 100);\n      }\n    }\n    value = amountValuetoPercentage;\n  } else if (type === 'percentage') {\n    if (value && value < minValue!) {\n      barBackgroundColor = COLORS.AVATARS_RED_2;\n    } else if (value && value >= maxValue!) {\n      barBackgroundColor = COLORS.SUCCESS_PRESSED;\n    } else {\n      barBackgroundColor = COLORS.TERTIARY_COLOR_ORANGE;\n    }\n    if (value) {\n      if (maxValue && maxValue != 0) {\n        amountValuetoPercentage = Math.round((value / maxValue) * 100);\n      }\n    }\n    value = amountValuetoPercentage;\n  } else if (type === 'winRatePercentage') {\n    if (value && value < minValue!) {\n      barBackgroundColor = COLORS.AVATARS_RED_2;\n    } else if (value && value >= maxValue!) {\n      barBackgroundColor = COLORS.SUCCESS_PRESSED;\n    } else {\n      barBackgroundColor = COLORS.TERTIARY_COLOR_ORANGE;\n    }\n  } else if (type === 'dealsClosed') {\n    if (value && value < minValue!) {\n      barBackgroundColor = COLORS.AVATARS_RED_2;\n    } else if (value && value >= maxValue!) {\n      barBackgroundColor = COLORS.SUCCESS_PRESSED;\n    } else {\n      barBackgroundColor = COLORS.TERTIARY_COLOR_ORANGE;\n    }\n    if (value) {\n      if (maxValue && maxValue != 0) {\n        amountValuetoPercentage = Math.round((value / maxValue) * 100);\n      }\n    }\n    value = amountValuetoPercentage;\n  } else if (type === 'days') {\n    if (value && value >= maxValue!) {\n      barBackgroundColor = COLORS.AVATARS_RED_2;\n    } else if (value && value < minValue!) {\n      barBackgroundColor = COLORS.SUCCESS_PRESSED;\n    } else {\n      barBackgroundColor = COLORS.TERTIARY_COLOR_ORANGE;\n    }\n    if (value) {\n      if (maxValue && maxValue != 0) {\n        amountValuetoPercentage = Math.round((value / maxValue) * 100);\n      }\n    }\n    value = amountValuetoPercentage;\n  } else if (type === 'salesActivity') {\n    if (value && value < minValue!) {\n      barBackgroundColor = COLORS.AVATARS_RED_2;\n    } else if (value && value >= maxValue!) {\n      barBackgroundColor = COLORS.SUCCESS_PRESSED;\n    } else {\n      barBackgroundColor = COLORS.TERTIARY_COLOR_ORANGE;\n    }\n  }\n\n  const BorderLinearProgressBar = withStyles(() =>\n    createStyles({\n      root: {\n        height: '5.79px',\n        width: '150px',\n        borderRadius: 5,\n      },\n      colorPrimary: {\n        backgroundColor: 'rgba(143, 146, 161, 0.2)',\n      },\n      bar: {\n        borderRadius: 5,\n        backgroundColor: `${barBackgroundColor}`,\n      },\n    }),\n  )(LinearProgress);\n  return (\n    <BorderLinearProgressBar\n      variant=\"determinate\"\n      value={value ? (value > 100 ? value / 2 : value) : 0}\n    />\n  );\n};\n\nexport default RepProgressBar;\n"]},"metadata":{},"sourceType":"module"}