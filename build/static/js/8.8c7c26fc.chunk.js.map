{"version":3,"sources":["utils/logger/logger.js","auth/Auth0Callback.tsx"],"names":["logger","createLogger","transports","add","Console","handleExceptions","format","combine","timestamp","colorize","simple","Auth0Callback","useAuth0","getAccessTokenWithPopup","loginWithRedirect","getIdTokenClaims","history","useHistory","useEffect","a","domain","process","audience","scope","accessToken","isEmpty","user","pendo","initialize","visitor","id","email","full_name","name","account","idToken","fetch","method","headers","Authorization","credentials","fetchResponse","json","fetchResponseAsJson","localStorage","setItem","jwtToken","push","error","message","getUserMetadata","Loader"],"mappings":"mVAEMA,EAASC,uBAAa,CAC1BC,WAAY,KAIdF,EAAOG,IACL,IAAID,aAAWE,QAAQ,CACrBC,kBAAkB,EAClBC,OAAQA,SAAOC,QACbD,SAAOE,UAAU,CACfF,OAAQ,wBAEVA,SAAOG,WACPH,SAAOI,aAQEV,Q,gBCqDAW,UAnEf,WAA0B,IAAD,EAMnBC,cAHFC,EAHqB,EAGrBA,wBACAC,EAJqB,EAIrBA,kBACAC,EALqB,EAKrBA,iBAEIC,EAAUC,cAyDhB,OAvDAC,qBAAU,YACa,uCAAG,sCAAAC,EAAA,6DAChBC,EAASC,8BADO,kBAGMR,EAAwB,CAChDS,SAAS,WAAD,OAAaF,EAAb,YACRG,MAAO,yBALW,UAGdC,EAHc,QAOhBC,YAAQD,GAPQ,gCAQZV,EAAkB,CACtBQ,SAAS,WAAD,OAAaF,EAAb,YACRG,MAAO,yBAVS,wBAcDR,EAAiB,CAClCO,SAAS,WAAD,OAAaF,EAAb,cAfU,eAcdM,EAdc,OAiBpBC,MAAMC,WAAW,CACfC,QAAS,CACPC,GAAIJ,EAAKK,MACTA,MAAOL,EAAKK,MAEZC,UAAWN,EAAKO,MAElBC,QAAS,CACPJ,GAAIV,KAGFe,EAAUT,EAAI,MA5BA,UA6BQU,MAAM,GAAD,OAC5Bf,+CAD4B,cAE/B,CACEgB,OAAQ,MACRC,QAAS,CACP,eAAgB,mBAChBC,cAAc,UAAD,OAAYJ,IAE3BK,YAAa,SArCG,eA6BdC,EA7Bc,iBAwCcA,EAAcC,OAxC5B,QAwCdC,EAxCc,OAyCpBC,aAAaC,QACX,cACAF,EAAsBA,EAAoBG,SAAW,IAEvD9B,EAAQ+B,KAAK,cA7CO,kDAgDpB/C,EAAOgD,MAAM,KAAEC,SAhDK,0DAAH,qDAmDhBC,KACJ,CAACrC,EAAyBC,EAAmBC,EAAkBC,IAE3D,cAACmC,EAAA,EAAD","file":"static/js/8.8c7c26fc.chunk.js","sourcesContent":["import { createLogger, format, transports } from 'winston';\n\nconst logger = createLogger({\n  transports: [],\n});\n\n// if (process.env.NODE_ENV !== \"production\") {\nlogger.add(\n  new transports.Console({\n    handleExceptions: true,\n    format: format.combine(\n      format.timestamp({\n        format: 'YYYY-MM-DD HH:mm:ss',\n      }),\n      format.colorize(),\n      format.simple(),\n    ),\n  }),\n);\n//   }\n\n// overriding default console\n\nexport default logger;\n","import { useAuth0 } from '@auth0/auth0-react';\nimport React, { useEffect } from 'react';\nimport { useHistory } from 'react-router';\nimport Loader from '../components/atoms/Loader';\nimport logger from '../utils/logger/logger';\nimport { isEmpty } from 'lodash-es';\n\ndeclare const pendo: any;\n\nfunction Auth0Callback() {\n  const {\n    // getAccessTokenSilently,\n    getAccessTokenWithPopup,\n    loginWithRedirect,\n    getIdTokenClaims,\n  } = useAuth0();\n  const history = useHistory();\n\n  useEffect(() => {\n    const getUserMetadata = async () => {\n      const domain = process.env.REACT_APP_AUTH0_DOMAIN || '';\n      try {\n        const accessToken = await getAccessTokenWithPopup({\n          audience: `https://${domain}/api/v2/`,\n          scope: 'openid email profile',\n        });\n        if (isEmpty(accessToken)) {\n          await loginWithRedirect({\n            audience: `https://${domain}/api/v2/`,\n            scope: 'openid email profile',\n          });\n        }\n\n        const user = await getIdTokenClaims({\n          audience: `https://${domain}/api/v2/`,\n        });\n        pendo.initialize({\n          visitor: {\n            id: user.email,\n            email: user.email,\n            // eslint-disable-next-line camelcase\n            full_name: user.name,\n          },\n          account: {\n            id: domain,\n          },\n        });\n        const idToken = user['__raw'];\n        const fetchResponse = await fetch(\n          `${process.env.REACT_APP_API_BASE || ''}/api/token`,\n          {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: `Bearer ${idToken}`,\n            },\n            credentials: 'omit',\n          },\n        );\n        const fetchResponseAsJson = await fetchResponse.json();\n        localStorage.setItem(\n          'accessToken',\n          fetchResponseAsJson ? fetchResponseAsJson.jwtToken : '',\n        );\n        history.push('/dashboard');\n        //history.length <= 1 ? history.push('/dashboard') : history.goBack();\n      } catch (e) {\n        logger.error(e.message);\n      }\n    };\n    void getUserMetadata();\n  }, [getAccessTokenWithPopup, loginWithRedirect, getIdTokenClaims, history]);\n\n  return <Loader />;\n}\n\nexport default Auth0Callback;\n"],"sourceRoot":""}