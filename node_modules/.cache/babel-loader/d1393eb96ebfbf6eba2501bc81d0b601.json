{"ast":null,"code":"var _jsxFileName = \"/home/komal/Documents/Current/peoplelens_ui/src/components/molecules/RepComparisonSalesOutcome/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Grid, makeStyles, Typography } from '@material-ui/core';\nimport React from 'react';\nimport RepProgressBar from '../../atoms/RepProgressBar';\nimport { COLORS } from '../../../plTheme';\nimport { _t_ } from '../../../utils/translation/translation';\nimport { _n_ } from '../../../utils/numerals/numerals';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RepComparisonSalesOutcome = ({\n  type,\n  headingName,\n  firstPersonValue,\n  secondPersonValue,\n  maxValue,\n  minValue,\n  avgValue,\n  index\n}) => {\n  _s();\n\n  let avg = secondPersonValue && avgValue && _n_(secondPersonValue - Math.round(avgValue), '0a');\n\n  if (type === 'percentage' || type === 'winRatePercentage') {\n    var _avg;\n\n    avg = ((_avg = avg) === null || _avg === void 0 ? void 0 : _avg.toString()) + '%';\n  }\n\n  const useStyles = makeStyles({\n    root: {\n      width: '90%',\n      height: '45px',\n      backgroundColor: COLORS.REPORTPAGE6BACKGROUNDCOLOR,\n      border: index == 3 ? '1px solid #2E6FF2' : '1px solid rgba(215, 223, 233, 0.2)',\n      // border: '1px solid rgba(215, 223, 233, 0.2)',\n      position: 'relative',\n      marginLeft: 50,\n      marginRight: 50\n    },\n    heading: {\n      lineHeight: '20px',\n      color: COLORS.REPCOMPARISONHEADINGCOLOR,\n      marginLeft: -5,\n      width: '172px',\n      marginTop: 10,\n      fontWeight: 400\n    },\n    progressBarDiv: {\n      width: '150px'\n    },\n    progressBarValue: {\n      marginTop: '1px',\n      marginLeft: '110px',\n      marginBottom: '1px',\n      width: '38px'\n    },\n    footerElement: {\n      marginTop: '3px'\n    } // errorDiv: {\n    //   position: 'relative',\n    //   top: '-15px',\n    //   left: '460px',\n    //   color: 'COLORS.PORTFOLIO',\n    //   width: '25px',\n    //   height: '25px',\n    // },\n\n  });\n  const classes = useStyles();\n\n  const firstPersonData = firstPersonValue && _n_(firstPersonValue, '0a');\n\n  const secondPersonData = secondPersonValue && _n_(secondPersonValue, '0a');\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"space-around\",\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        className: classes.heading,\n        children: _t_(headingName)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"column\",\n        justify: \"space-between\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          className: classes.progressBarDiv,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            className: classes.progressBarValue,\n            align: \"right\",\n            children: type === 'percentage' || type === 'winRatePercentage' ? `${firstPersonValue ? firstPersonValue.toString() : 0}%` : type === 'amount' || type === 'dealsClosed' || type === 'dealSizeAmount' ? // ? firstPersonValue && Math.round(firstPersonValue / 1000)\n            firstPersonData : firstPersonValue\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(RepProgressBar, {\n            value: firstPersonValue,\n            type: type,\n            maxValue: maxValue,\n            minValue: minValue\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"column\",\n        justify: \"space-between\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          className: classes.progressBarDiv,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            className: classes.progressBarValue,\n            align: \"right\",\n            children: type === 'percentage' || type === 'winRatePercentage' ? `${secondPersonValue ? secondPersonValue.toString() : 0}%` : type === 'amount' || type === 'dealsClosed' || type === 'dealSizeAmount' ? // ? secondPersonValue && Math.round(secondPersonValue / 1000)\n            secondPersonData : secondPersonValue\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(RepProgressBar, {\n            value: secondPersonValue,\n            type: type,\n            maxValue: maxValue,\n            minValue: minValue\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          className: classes.footerElement,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: avg && avg.toString().includes('-') ? `${avg} avg` : `+ ${avg && avg.toString()} avg`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RepComparisonSalesOutcome, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", true);\n\n_c = RepComparisonSalesOutcome;\nexport default RepComparisonSalesOutcome;\n\nvar _c;\n\n$RefreshReg$(_c, \"RepComparisonSalesOutcome\");","map":{"version":3,"sources":["/home/komal/Documents/Current/peoplelens_ui/src/components/molecules/RepComparisonSalesOutcome/index.tsx"],"names":["Grid","makeStyles","Typography","React","RepProgressBar","COLORS","_t_","_n_","RepComparisonSalesOutcome","type","headingName","firstPersonValue","secondPersonValue","maxValue","minValue","avgValue","index","avg","Math","round","toString","useStyles","root","width","height","backgroundColor","REPORTPAGE6BACKGROUNDCOLOR","border","position","marginLeft","marginRight","heading","lineHeight","color","REPCOMPARISONHEADINGCOLOR","marginTop","fontWeight","progressBarDiv","progressBarValue","marginBottom","footerElement","classes","firstPersonData","secondPersonData","includes"],"mappings":"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","sourcesContent":["import { Grid, makeStyles, Typography } from '@material-ui/core';\nimport React from 'react';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport RepProgressBar from '../../atoms/RepProgressBar';\nimport { COLORS } from '../../../plTheme';\nimport { _t_ } from '../../../utils/translation/translation';\nimport { _n_ } from '../../../utils/numerals/numerals';\n\ninterface RepComparisonSalesOutcomeProps {\n  type?: string;\n  headingName: string;\n  firstPersonValue?: number | null | undefined;\n  secondPersonValue?: number | null | undefined;\n  // totalSalesClosed?: number | null | undefined;\n  maxValue?: number | null | undefined;\n  minValue?: number | null | undefined;\n\n  avgValue?: number | null | undefined;\n  index: number;\n}\n\nconst RepComparisonSalesOutcome: React.FC<RepComparisonSalesOutcomeProps> = ({\n  type,\n  headingName,\n  firstPersonValue,\n  secondPersonValue,\n  maxValue,\n  minValue,\n  avgValue,\n  index,\n}: RepComparisonSalesOutcomeProps) => {\n  let avg =\n    secondPersonValue &&\n    avgValue &&\n    _n_(secondPersonValue - Math.round(avgValue), '0a');\n  if (type === 'percentage' || type === 'winRatePercentage') {\n    avg = avg?.toString() + '%';\n  }\n\n  const useStyles = makeStyles({\n    root: {\n      width: '90%',\n\n      height: '45px',\n      backgroundColor: COLORS.REPORTPAGE6BACKGROUNDCOLOR,\n      border:\n        index == 3 ? '1px solid #2E6FF2' : '1px solid rgba(215, 223, 233, 0.2)',\n      // border: '1px solid rgba(215, 223, 233, 0.2)',\n      position: 'relative',\n      marginLeft: 50,\n      marginRight: 50,\n    },\n    heading: {\n      lineHeight: '20px',\n      color: COLORS.REPCOMPARISONHEADINGCOLOR,\n      marginLeft: -5,\n      width: '172px',\n      marginTop: 10,\n      fontWeight: 400,\n    },\n\n    progressBarDiv: {\n      width: '150px',\n    },\n    progressBarValue: {\n      marginTop: '1px',\n      marginLeft: '110px',\n      marginBottom: '1px',\n      width: '38px',\n    },\n\n    footerElement: {\n      marginTop: '3px',\n    },\n    // errorDiv: {\n    //   position: 'relative',\n    //   top: '-15px',\n    //   left: '460px',\n    //   color: 'COLORS.PORTFOLIO',\n    //   width: '25px',\n    //   height: '25px',\n    // },\n  });\n\n  const classes = useStyles();\n\n  const firstPersonData = firstPersonValue && _n_(firstPersonValue, '0a');\n\n  const secondPersonData = secondPersonValue && _n_(secondPersonValue, '0a');\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      justify=\"space-around\"\n      className={classes.root}\n    >\n      {/* {barBackgroundColor === COLORS.AVATARS_RED_2 ? (\n        <ErrorIcon className={classes.errorDiv} />\n      ) : (\n        ''\n      )} */}\n      <Grid item>\n        <Typography variant=\"h5\" className={classes.heading}>\n          {_t_(headingName)}\n        </Typography>\n      </Grid>\n      <Grid item>\n        <Grid container direction=\"column\" justify=\"space-between\">\n          <Grid item className={classes.progressBarDiv}>\n            <Typography\n              variant=\"h6\"\n              className={classes.progressBarValue}\n              align=\"right\"\n            >\n              {type === 'percentage' || type === 'winRatePercentage'\n                ? `${firstPersonValue ? firstPersonValue.toString() : 0}%`\n                : type === 'amount' ||\n                  type === 'dealsClosed' ||\n                  type === 'dealSizeAmount'\n                ? // ? firstPersonValue && Math.round(firstPersonValue / 1000)\n                  firstPersonData\n                : firstPersonValue}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <RepProgressBar\n              value={firstPersonValue}\n              type={type}\n              maxValue={maxValue}\n              minValue={minValue}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item>\n        <Grid container direction=\"column\" justify=\"space-between\">\n          <Grid item className={classes.progressBarDiv}>\n            <Typography\n              variant=\"h6\"\n              className={classes.progressBarValue}\n              align=\"right\"\n            >\n              {type === 'percentage' || type === 'winRatePercentage'\n                ? `${secondPersonValue ? secondPersonValue.toString() : 0}%`\n                : type === 'amount' ||\n                  type === 'dealsClosed' ||\n                  type === 'dealSizeAmount'\n                ? // ? secondPersonValue && Math.round(secondPersonValue / 1000)\n                  secondPersonData\n                : secondPersonValue}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <RepProgressBar\n              value={secondPersonValue}\n              type={type}\n              maxValue={maxValue}\n              minValue={minValue}\n            />\n          </Grid>\n          <Grid item className={classes.footerElement}>\n            <Typography variant=\"h6\">\n              {avg && avg.toString().includes('-')\n                ? `${avg} avg`\n                : `+ ${avg && avg.toString()} avg`}\n            </Typography>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default RepComparisonSalesOutcome;\n"]},"metadata":{},"sourceType":"module"}