{"ast":null,"code":"var _jsxFileName = \"/home/komal/Documents/Backup/FrontEnd/peoplelens_ui/src/components/organisms/KeyDriversContainer/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useQuery } from '@apollo/client';\nimport { Grid, GridList, GridListTile, makeStyles } from '@material-ui/core';\nimport React, { useEffect } from 'react';\nimport { GetKeyDrivers } from '../../../gql/queries/keyDrivers';\nimport { _t_ } from '../../../utils/translation/translation';\nimport BarAndLineGraph from '../../molecules/BarAndLineGraph';\nimport { dates } from '../ManagerDashboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst json = [{\n  label: 'Graph1',\n  title1: 'Product Knowledge',\n  title2: 'Quota Attainment',\n  legend1: 'Assessment Scores',\n  legend2: 'Quota Attainment',\n  series1Data: [1.0, 1.0, 3.0, 2.0],\n  series2Data: [3.0, 4.0, 3.0, 2.0]\n}, {\n  label: 'Graph2',\n  title1: 'Time Allocation',\n  title2: 'Deal Size',\n  legend1: 'Time w/ Product Teams',\n  legend2: 'Deal Size',\n  series1Data: [1.0, 2.0, 5.0, 4.0],\n  series2Data: [3.0, 4.0, 5.0, 6.0]\n}, {\n  label: 'Graph3',\n  title1: 'Pipeline Discipline',\n  title2: 'Win Rate',\n  legend1: 'Product Demos',\n  legend2: 'Win Rate',\n  series1Data: [1.0, 3.0, 5.0, 7.0],\n  series2Data: [5.0, 4.0, 3.0, 2.0]\n}];\n\nconst KeyDriversContainer = ({\n  activeQuarter,\n  activeProductId\n}) => {\n  _s();\n\n  var _data$keyDriversData, _data$keyDriversData$, _data$keyDriversData2, _data$keyDriversData3, _data$keyDriversData4, _data$keyDriversData5;\n\n  const useStyles = makeStyles({\n    graphDiv: {\n      padding: '2% 2% 2% 2%',\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'space-around',\n      overflow: 'hidden'\n    },\n    gridList: {\n      flexWrap: 'nowrap',\n      // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n      overflow: 'auto',\n      padding: '0% 0% 0% 0%'\n    }\n  });\n  const [activeProd, setActiveProd] = React.useState(activeProductId);\n  useEffect(() => {\n    setActiveProd(activeProductId);\n  }, [activeProductId]);\n  const {\n    data,\n    refetch\n  } = useQuery(GetKeyDrivers, {\n    variables: {\n      keyDriversInput: {\n        startDate: activeQuarter !== undefined ? dates[activeQuarter].startDate : '',\n        endDate: activeQuarter !== undefined ? dates[activeQuarter].endDate : '',\n        productId: activeProductId === '' ? null : activeProductId\n      }\n    }\n  });\n  useEffect(() => {\n    void refetch();\n  }, [activeQuarter, refetch, activeProd]);\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"row\",\n      alignItems: \"center\",\n      className: classes.graphDiv,\n      style: {\n        width: '100%',\n        height: 363,\n        background: (data === null || data === void 0 ? void 0 : (_data$keyDriversData = data.keyDriversData) === null || _data$keyDriversData === void 0 ? void 0 : (_data$keyDriversData$ = _data$keyDriversData.demoMode) === null || _data$keyDriversData$ === void 0 ? void 0 : _data$keyDriversData$.isDemoMode) ? '#D9D9D9' : 'white',\n        opacity: (data === null || data === void 0 ? void 0 : (_data$keyDriversData2 = data.keyDriversData) === null || _data$keyDriversData2 === void 0 ? void 0 : (_data$keyDriversData3 = _data$keyDriversData2.demoMode) === null || _data$keyDriversData3 === void 0 ? void 0 : _data$keyDriversData3.isDemoMode) ? 0.6 : 0\n      },\n      children: /*#__PURE__*/_jsxDEV(GridList, {\n        className: classes.gridList,\n        cols: 3,\n        style: {\n          width: '100%'\n        },\n        children: (data === null || data === void 0 ? void 0 : (_data$keyDriversData4 = data.keyDriversData) === null || _data$keyDriversData4 === void 0 ? void 0 : _data$keyDriversData4.graphValues) && (data === null || data === void 0 ? void 0 : (_data$keyDriversData5 = data.keyDriversData) === null || _data$keyDriversData5 === void 0 ? void 0 : _data$keyDriversData5.graphValues.map(item => item && /*#__PURE__*/_jsxDEV(GridListTile, {\n          style: {\n            height: '100%'\n          },\n          children: /*#__PURE__*/_jsxDEV(BarAndLineGraph, {\n            title1: _t_(item.title1 ? item.title1 : ''),\n            title2: _t_(item.title2 ? item.title2 : ''),\n            legend1: _t_(item.legend1 ? item.legend1 : ''),\n            legend2: _t_(item.legend2 ? item.legend2 : ''),\n            series1Data: item.series1Data,\n            series2Data: item.series2Data\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 21\n          }, this)\n        }, item.label, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 19\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(KeyDriversContainer, \"l0rylfeQplezN4sb4faBXeyYQBU=\", true, function () {\n  return [useQuery];\n});\n\n_c = KeyDriversContainer;\nexport default KeyDriversContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"KeyDriversContainer\");","map":{"version":3,"sources":["/home/komal/Documents/Backup/FrontEnd/peoplelens_ui/src/components/organisms/KeyDriversContainer/index.tsx"],"names":["useQuery","Grid","GridList","GridListTile","makeStyles","React","useEffect","GetKeyDrivers","_t_","BarAndLineGraph","dates","json","label","title1","title2","legend1","legend2","series1Data","series2Data","KeyDriversContainer","activeQuarter","activeProductId","useStyles","graphDiv","padding","display","flexWrap","justifyContent","overflow","gridList","activeProd","setActiveProd","useState","data","refetch","variables","keyDriversInput","startDate","undefined","endDate","productId","classes","width","height","background","keyDriversData","demoMode","isDemoMode","opacity","graphValues","map","item"],"mappings":"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","sourcesContent":["import { QueryResult, useQuery } from '@apollo/client';\r\nimport {\r\n  Grid,\r\n  GridList,\r\n  GridListTile,\r\n  GridListTileBar,\r\n  makeStyles,\r\n} from '@material-ui/core';\r\nimport React, { useEffect } from 'react';\r\nimport { GetKeyDrivers } from '../../../gql/queries/keyDrivers';\r\nimport {\r\n  keyDriversData,\r\n  keyDriversData_keyDriversData,\r\n} from '../../../gql/types';\r\nimport { _t_ } from '../../../utils/translation/translation';\r\nimport BarAndLineGraph from '../../molecules/BarAndLineGraph';\r\nimport { dates } from '../ManagerDashboard';\r\n\r\nexport interface KeyDriversContainerProps {\r\n  activeQuarter?: number;\r\n  activeProductId?: string;\r\n}\r\n\r\nconst json = [\r\n  {\r\n    label: 'Graph1',\r\n    title1: 'Product Knowledge',\r\n    title2: 'Quota Attainment',\r\n    legend1: 'Assessment Scores',\r\n    legend2: 'Quota Attainment',\r\n    series1Data: [1.0, 1.0, 3.0, 2.0],\r\n    series2Data: [3.0, 4.0, 3.0, 2.0],\r\n  },\r\n  {\r\n    label: 'Graph2',\r\n    title1: 'Time Allocation',\r\n    title2: 'Deal Size',\r\n    legend1: 'Time w/ Product Teams',\r\n    legend2: 'Deal Size',\r\n    series1Data: [1.0, 2.0, 5.0, 4.0],\r\n    series2Data: [3.0, 4.0, 5.0, 6.0],\r\n  },\r\n  {\r\n    label: 'Graph3',\r\n    title1: 'Pipeline Discipline',\r\n    title2: 'Win Rate',\r\n    legend1: 'Product Demos',\r\n    legend2: 'Win Rate',\r\n    series1Data: [1.0, 3.0, 5.0, 7.0],\r\n    series2Data: [5.0, 4.0, 3.0, 2.0],\r\n  },\r\n];\r\n\r\nconst KeyDriversContainer: React.FC<KeyDriversContainerProps> = ({\r\n  activeQuarter,\r\n  activeProductId,\r\n}: KeyDriversContainerProps) => {\r\n  const useStyles = makeStyles({\r\n    graphDiv: {\r\n      padding: '2% 2% 2% 2%',\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n      justifyContent: 'space-around',\r\n      overflow: 'hidden',\r\n    },\r\n    gridList: {\r\n      flexWrap: 'nowrap',\r\n      // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\r\n      overflow: 'auto',\r\n      padding: '0% 0% 0% 0%',\r\n    },\r\n  });\r\n\r\n  const [activeProd, setActiveProd] = React.useState(activeProductId);\r\n\r\n  useEffect(() => {\r\n    setActiveProd(activeProductId);\r\n  }, [activeProductId]);\r\n\r\n  const { data, refetch }: QueryResult<keyDriversData> = useQuery(\r\n    GetKeyDrivers,\r\n    {\r\n      variables: {\r\n        keyDriversInput: {\r\n          startDate:\r\n            activeQuarter !== undefined ? dates[activeQuarter].startDate : '',\r\n          endDate:\r\n            activeQuarter !== undefined ? dates[activeQuarter].endDate : '',\r\n          productId: activeProductId === '' ? null : activeProductId,\r\n        },\r\n      },\r\n    },\r\n  );\r\n  \r\n  useEffect(() => {\r\n    void refetch();\r\n  }, [activeQuarter, refetch, activeProd]);\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        alignItems=\"center\"\r\n        className={classes.graphDiv}\r\n        style={{ width: '100%', height: 363, background: data?.keyDriversData?.demoMode?.isDemoMode ? '#D9D9D9' : 'white', opacity: data?.keyDriversData?.demoMode?.isDemoMode ? 0.6 : 0 }}\r\n      >\r\n        <GridList\r\n          className={classes.gridList}\r\n          cols={3}\r\n          style={{ width: '100%' }}\r\n        >\r\n          {data?.keyDriversData?.graphValues &&\r\n            data?.keyDriversData?.graphValues.map(\r\n              (item) =>\r\n                item && (\r\n                  <GridListTile\r\n                    key={item.label}\r\n                    style={{\r\n                      height: '100%',\r\n                    }}\r\n                  >\r\n                    <BarAndLineGraph\r\n                      title1={_t_(item.title1 ? item.title1 : '')}\r\n                      title2={_t_(item.title2 ? item.title2 : '')}\r\n                      legend1={_t_(item.legend1 ? item.legend1 : '')}\r\n                      legend2={_t_(item.legend2 ? item.legend2 : '')}\r\n                      series1Data={item.series1Data}\r\n                      series2Data={item.series2Data}\r\n                    />\r\n                  </GridListTile>\r\n                ),\r\n            )}\r\n        </GridList>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default KeyDriversContainer;\r\n"]},"metadata":{},"sourceType":"module"}