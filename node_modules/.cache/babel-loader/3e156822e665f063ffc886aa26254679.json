{"ast":null,"code":"var _jsxFileName = \"/home/komal/Documents/Current/peoplelens_ui/src/components/molecules/DropDown/index.tsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\nimport { makeStyles, Icon } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { useGlobalStyles } from '../../../plStyles';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport PLChip from '../../atoms/PLChip/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DropDown = ({\n  values,\n  status,\n  width\n}) => {\n  _s();\n\n  const useStyles = makeStyles({\n    icon: {\n      paddingRight: 0,\n      '&&': {\n        paddingRight: 0,\n        // only way to override\n        paddingLeft: 0\n      }\n    },\n    icon1: {\n      color: 'white'\n    }\n  }); //   const SelectIcon = withStyles(() =>\n  //     createStyles({\n  //       MuiSelect: {\n  //       },\n  //     }),\n  //   )(Select);\n\n  const classes = useStyles();\n  const globalClasses = useGlobalStyles(); // const names = [\n  //   { key: 'Not Started', label: 'Not Started' },\n  //   { key: 'In Progress', label: 'In Progress' },\n  //   { key: 'Done', label: 'Done' },\n  // ];\n\n  const [option, setOption] = useState(status);\n  const [names, setNames] = useState(values);\n\n  const handleChange = event => {\n    setOption(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(FormControl, {\n      children: /*#__PURE__*/_jsxDEV(Select, {\n        disabled: true // eslint-disable-next-line react/jsx-boolean-value\n        ,\n        autoWidth: true,\n        \"data-testid\": \"select\",\n        disableUnderline: true,\n        labelId: \"select-label\",\n        id: \"demo-controlled-open-select\",\n        value: option,\n        onChange: handleChange,\n        IconComponent: Icon,\n        displayEmpty: true,\n        classes: {\n          select: classes.icon,\n          icon: classes.icon1\n        } // anchorEl={null}\n        // getContentAnchorEl={null}\n        ,\n        MenuProps: {\n          anchorOrigin: {\n            vertical: 'bottom',\n            horizontal: 'left'\n          },\n          transformOrigin: {\n            vertical: 'top',\n            horizontal: 'left'\n          },\n          getContentAnchorEl: null\n        } // transformOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n        ,\n        renderValue: selected => /*#__PURE__*/_jsxDEV(PLChip, {\n          label: String(selected),\n          variant: 'success',\n          dropDown: true,\n          fixed: true,\n          width: width\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this),\n        children: names.map(name => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: name.label,\n          children: /*#__PURE__*/_jsxDEV(PLChip, {\n            label: name.label,\n            fixed: true,\n            width: width,\n            variant: 'success',\n            dropDown: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this)\n        }, name.label, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DropDown, \"M0wuC0qMU/M4xGc+GQ5PeEx2VHk=\", true, function () {\n  return [useGlobalStyles];\n});\n\n_c = DropDown;\nexport default DropDown;\n\nvar _c;\n\n$RefreshReg$(_c, \"DropDown\");","map":{"version":3,"sources":["/home/komal/Documents/Current/peoplelens_ui/src/components/molecules/DropDown/index.tsx"],"names":["makeStyles","Icon","React","useState","useGlobalStyles","FormControl","Select","MenuItem","PLChip","DropDown","values","status","width","useStyles","icon","paddingRight","paddingLeft","icon1","color","classes","globalClasses","option","setOption","names","setNames","handleChange","event","target","value","select","anchorOrigin","vertical","horizontal","transformOrigin","getContentAnchorEl","selected","String","map","name","label"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/restrict-template-expressions */\r\nimport {\r\n  Grid,\r\n  makeStyles,\r\n  Tooltip,\r\n  Typography,\r\n  withStyles,\r\n  createStyles,\r\n  Icon,\r\n} from '@material-ui/core';\r\nimport React, { useState } from 'react';\r\nimport { _t_ } from '../../../utils/translation/translation';\r\nimport { useGlobalStyles } from '../../../plStyles';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ExpandMoreOutlinedIcon from '@material-ui/icons/ExpandMoreOutlined';\r\nimport PLChip from '../../atoms/PLChip/index';\r\nexport interface namesArray {\r\n  key: string;\r\n  label: string;\r\n}\r\nexport interface DropDownProps {\r\n  values: namesArray[];\r\n  status: string;\r\n  width: string;\r\n  disabled: boolean\r\n}\r\n\r\nconst DropDown: React.FC<DropDownProps> = ({\r\n  values,\r\n  status,\r\n  width,\r\n}: DropDownProps) => {\r\n  const useStyles = makeStyles({\r\n    icon: {\r\n      paddingRight: 0,\r\n      '&&': {\r\n        paddingRight: 0, // only way to override\r\n        paddingLeft: 0,\r\n      },\r\n    },\r\n    icon1: {\r\n      color: 'white',\r\n    },\r\n  });\r\n  //   const SelectIcon = withStyles(() =>\r\n  //     createStyles({\r\n  //       MuiSelect: {\r\n\r\n  //       },\r\n  //     }),\r\n  //   )(Select);\r\n\r\n  const classes = useStyles();\r\n  const globalClasses = useGlobalStyles();\r\n  // const names = [\r\n  //   { key: 'Not Started', label: 'Not Started' },\r\n\r\n  //   { key: 'In Progress', label: 'In Progress' },\r\n  //   { key: 'Done', label: 'Done' },\r\n  // ];\r\n  const [option, setOption] = useState(status);\r\n  const [names, setNames] = useState(values);\r\n  const handleChange = (event: any) => {\r\n    setOption(event.target.value);\r\n  };\r\n  return (\r\n    <div>\r\n      <FormControl>\r\n        <Select\r\n          disabled={true}\r\n          // eslint-disable-next-line react/jsx-boolean-value\r\n          autoWidth={true}\r\n          data-testid=\"select\"\r\n          disableUnderline={true}\r\n          labelId=\"select-label\"\r\n          id=\"demo-controlled-open-select\"\r\n          value={option}\r\n          onChange={handleChange}\r\n          IconComponent={Icon}\r\n          displayEmpty\r\n          classes={{ select: classes.icon, icon: classes.icon1 }}\r\n          // anchorEl={null}\r\n          // getContentAnchorEl={null}\r\n          MenuProps={{\r\n            anchorOrigin: {\r\n              vertical: 'bottom',\r\n              horizontal: 'left',\r\n            },\r\n            transformOrigin: {\r\n              vertical: 'top',\r\n              horizontal: 'left',\r\n            },\r\n            getContentAnchorEl: null,\r\n          }}\r\n          // transformOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n          renderValue={(selected: any) => (\r\n            <PLChip\r\n              label={String(selected)}\r\n              variant={'success'}\r\n              dropDown={true}\r\n              fixed={true}\r\n              width={width}\r\n            />\r\n          )}\r\n        >\r\n          {names.map((name) => (\r\n            <MenuItem key={name.label} value={name.label}>\r\n              <PLChip\r\n                label={name.label}\r\n                fixed={true}\r\n                width={width}\r\n                variant={'success'}\r\n                dropDown={false}\r\n              />\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DropDown;\r\n"]},"metadata":{},"sourceType":"module"}