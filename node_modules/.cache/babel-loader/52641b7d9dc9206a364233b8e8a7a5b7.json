{"ast":null,"code":"var _jsxFileName = \"/home/komal/Documents/Current/peoplelens_ui/src/components/molecules/ProductPenetrationGraph/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Grid, makeStyles, Typography } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { COLORS } from '../../../plTheme';\nimport { useWindowSize } from '../../../utils/hooks/useWindowSize';\nimport WidgetCard from '../../atoms/WidgetCard';\nimport { _t_ } from '../../../utils/translation/translation';\nimport { useGlobalStyles } from '../../../plStyles';\nimport { ProductColorContext } from '../../../utils/productColorContext';\nimport { _n_ } from '../../../utils/numerals/numerals';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ProductPenetrationGraph = ({\n  data,\n  activeQuarter,\n  reportInd,\n  chartTitle,\n  xAxisTitile,\n  repLens\n}) => {\n  _s();\n\n  const displayProductName = name => {\n    return `<span style=\"font-size: 12px; font-family: Rubik; font-weight: normal;letter-spacing: 0.01em;color: #171F46;text-transform: uppercase;\"> ${name} </span>`;\n  };\n\n  const [seriesData, setSeriesData] = useState([]);\n  const {\n    ProductColorMap,\n    setProductColorMap\n  } = React.useContext(ProductColorContext);\n  useEffect(() => {\n    if (repLens) options.plotOptions.bar.dataLabels.verticalAlign = 'top';\n\n    const loadData = () => {\n      const tempData = [];\n\n      if (data) {\n        for (let i = 0; i < (data === null || data === void 0 ? void 0 : data.length); i++) {\n          var _data$i, _data$i2, _ProductColorMap$find;\n\n          const obj = {\n            name: '',\n            color: '',\n            data: []\n          };\n          const value = [];\n          const dealCount = (_data$i = data[i]) === null || _data$i === void 0 ? void 0 : _data$i[1];\n          dealCount && value.push(Number(Math.abs(Number(dealCount)).toFixed()));\n          const productName = String((_data$i2 = data[i]) === null || _data$i2 === void 0 ? void 0 : _data$i2[0]);\n          obj.name = displayProductName(productName ? productName : `Product ${i}`);\n          value[0] = parseInt(value[0].toString().slice(0, 3));\n          obj.data = value;\n          const smallerName = productName.toLowerCase();\n          const color = ProductColorMap === null || ProductColorMap === void 0 ? void 0 : (_ProductColorMap$find = ProductColorMap.find(x => x.productName === smallerName)) === null || _ProductColorMap$find === void 0 ? void 0 : _ProductColorMap$find.color;\n          obj.color = color ? color : '';\n          tempData.push(obj);\n        }\n      }\n\n      setSeriesData(tempData);\n      console.log(tempData);\n    };\n\n    loadData();\n  }, [data]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const useStyles = makeStyles({\n    root: {\n      paddingLeft: 8,\n      paddingRight: 27,\n      paddingBottom: 20,\n      margin: '0 auto',\n      width: 405,\n      height: 301\n    },\n    main: {\n      padding: 16,\n      opacity: chartTitle.includes('gross margin') ? 0.6 : 1,\n      background: chartTitle.includes('gross margin') ? 'rgb(217, 217, 217)' : 'white'\n    }\n  });\n  const classes = useStyles();\n  const [width] = useWindowSize();\n  const options = {\n    chart: {\n      type: 'bar',\n      backgroundColor: 'transparent',\n      height: reportInd ? 135 : 245,\n      // width: '100%',\n      reflow: true,\n      marginLeft: 0,\n      marginRight: 50\n    },\n    title: {\n      text: ' '\n    },\n    xAxis: {\n      labels: {\n        style: {\n          fontFamily: 'Rubik',\n          fontSize: '12px',\n          fontWeight: 500,\n          color: COLORS.BARGRAPH_LABEL\n        }\n      },\n      categories: [' '],\n      gridLineWidth: reportInd ? 0 : 1,\n      lineColor: COLORS.GENERAL_WHITE,\n      gridLineDashStyle: reportInd ? '' : 'Dash'\n    },\n    yAxis: {\n      labels: {\n        style: {\n          fontFamily: 'Rubik',\n          fontSize: '12px',\n          fontWeight: 500,\n          color: COLORS.BARGRAPH_LABEL\n        }\n      },\n      title: {\n        text: `<span style=\"font-size: 12px; font-family: Rubik; font-weight: normal;text-transform: uppercase;fill:#171F46\" >${_t_(xAxisTitile)}</span> `,\n        align: 'low',\n        x: 0,\n        y: 10\n      },\n      gridLineDashStyle: 'Dash',\n      gridLineColor: 'transparent',\n      lineColor: 'transparent'\n    },\n    plotOptions: {\n      series: {\n        events: {\n          legendItemClick: function () {\n            return false;\n          }\n        },\n        // groupPadding: reportInd ? 1 : 0.1,\n        // pointWidth: reportInd ? 15 : repLens ? 15 : 20,\n        // borderRadius: reportInd ? 8 : repLens ? 8 : 15,\n        groupPadding: reportInd ? 1 : 0.1,\n        pointWidth: reportInd ? 11 : 26,\n        borderRadius: reportInd ? 5 : 15,\n        states: {\n          inactive: {\n            opacity: 1,\n            borderColor: 'transparent'\n          },\n          active: {\n            borderColor: 'transparent'\n          },\n          hover: {\n            enabled: false\n          }\n        }\n      },\n      point: {\n        events: {\n          legendItemClick: function () {\n            // this.slice(null);\n            return false;\n          }\n        }\n      },\n      bar: {\n        dataLabels: {\n          enabled: true,\n          style: {\n            fontFamily: 'Rubik',\n            fontSize: repLens ? '10px' : '14px',\n            fontWeight: 300,\n            lineHeight: '14px'\n          },\n          // verticalAlign: reportInd ? 'top' : 'bottom',\n          // verticalAlign: seriesData.length > 3 ? 'bottom' : 'top',\n          y: repLens ? -6 : -1,\n          crop: false,\n          inside: false,\n          overflow: 'allow',\n          position: 'right',\n          formatter: function () {\n            return xAxisTitile.toLocaleUpperCase() === 'PERCENTAGE' ? _n_(this.y / 100, '0.0%') : _n_(this.y, '0,0');\n          }\n        },\n        states: {\n          hover: {\n            brightness: 0\n          }\n        },\n        point: {\n          events: {\n            legendItemClick: function () {\n              // this.slice(null);\n              return false;\n            }\n          }\n        }\n      }\n    },\n    tooltip: {\n      valueSuffix: '%',\n      backgroundColor: COLORS.GENERAL_WHITE,\n      borderWidth: 0,\n      shadow: false,\n      color: COLORS.GENERAL_WHITE,\n      style: {\n        padding: 15,\n        fontFamily: 'Rubik',\n        fontWeight: 500,\n        // fontSize: 12,\n        color: COLORS.TEXT_HIGH_EMPHASIS,\n        fontSize: 13\n      },\n      positioner: function (width, height, point) {\n        return {\n          x: Number(point.plotX) - Number(point.plotX) / 2 - Number(point.plotX) / 8,\n          y: point.plotY - Number(height) / 4\n        };\n      },\n      pointFormat: xAxisTitile.toLocaleUpperCase() === 'PERCENTAGE' ? `<span style=\"font-size: 12px; font-family: Rubik; font-weight: bold;text-transform: uppercase;fill:#171F46\" >{series.name}</span> ` + '</br>' + '{point.y:.1f}' + '%' : `<span style=\"font-size: 12px; font-family: Rubik; font-weight: bold;text-transform: uppercase;fill:#171F46\" >{series.name}</span> ` + '</br>' + '{point.y:.0f} ' + ' ' + xAxisTitile.toLocaleUpperCase()\n    },\n    legend: {\n      useHTML: true,\n      itemStyle: {\n        lineHeight: '20px'\n      },\n      fontSize: 12,\n      layout: 'horizontal',\n      align: 'left',\n      verticalAlign: 'top',\n      x: width < 1500 ? -20 : reportInd ? -18 : -20,\n      y: reportInd ? -15 : -15,\n      symbolHeight: 5,\n      symbolWidth: width < 1500 ? reportInd ? 12 : 15 : 15,\n      symbolBorderRadius: 2,\n      symbolRadius: 2,\n      squareSymbol: false\n    },\n    credits: {\n      enabled: false\n    },\n    series: seriesData\n  };\n  const globalClasses = useGlobalStyles();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(WidgetCard, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"column\",\n        className: classes.main,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            className: globalClasses.body1WidgetTitle,\n            children: _t_(chartTitle)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          style: {\n            paddingLeft: 1,\n            width: '100%'\n          },\n          children: /*#__PURE__*/_jsxDEV(HighchartsReact, {\n            highcharts: Highcharts,\n            options: options\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(ProductPenetrationGraph, \"C6allzSfqhrc1orF+MpfsYv4mnQ=\", true, function () {\n  return [useWindowSize, useGlobalStyles];\n});\n\n_c = ProductPenetrationGraph;\nexport default ProductPenetrationGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductPenetrationGraph\");","map":{"version":3,"sources":["/home/komal/Documents/Current/peoplelens_ui/src/components/molecules/ProductPenetrationGraph/index.tsx"],"names":["Grid","makeStyles","Typography","React","useEffect","useState","Highcharts","HighchartsReact","COLORS","useWindowSize","WidgetCard","_t_","useGlobalStyles","ProductColorContext","_n_","ProductPenetrationGraph","data","activeQuarter","reportInd","chartTitle","xAxisTitile","repLens","displayProductName","name","seriesData","setSeriesData","ProductColorMap","setProductColorMap","useContext","options","plotOptions","bar","dataLabels","verticalAlign","loadData","tempData","i","length","obj","color","value","dealCount","push","Number","Math","abs","toFixed","productName","String","parseInt","toString","slice","smallerName","toLowerCase","find","x","console","log","useStyles","root","paddingLeft","paddingRight","paddingBottom","margin","width","height","main","padding","opacity","includes","background","classes","chart","type","backgroundColor","reflow","marginLeft","marginRight","title","text","xAxis","labels","style","fontFamily","fontSize","fontWeight","BARGRAPH_LABEL","categories","gridLineWidth","lineColor","GENERAL_WHITE","gridLineDashStyle","yAxis","align","y","gridLineColor","series","events","legendItemClick","groupPadding","pointWidth","borderRadius","states","inactive","borderColor","active","hover","enabled","point","lineHeight","crop","inside","overflow","position","formatter","toLocaleUpperCase","brightness","tooltip","valueSuffix","borderWidth","shadow","TEXT_HIGH_EMPHASIS","positioner","plotX","plotY","pointFormat","legend","useHTML","itemStyle","layout","symbolHeight","symbolWidth","symbolBorderRadius","symbolRadius","squareSymbol","credits","globalClasses","body1WidgetTitle"],"mappings":";;;AAAA,SAASA,IAAT,EAAeC,UAAf,EAA2BC,UAA3B,QAA6C,mBAA7C;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,eAAP,MAA4B,2BAA5B;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,aAAT,QAA8B,oCAA9B;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,SAASC,GAAT,QAAoB,wCAApB;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,mBAAT,QAAoC,oCAApC;AACA,SAASC,GAAT,QAAoB,kCAApB;;;;AAiBA,MAAMC,uBAAgD,GAAG,CAAC;AACxDC,EAAAA,IADwD;AAExDC,EAAAA,aAFwD;AAGxDC,EAAAA,SAHwD;AAIxDC,EAAAA,UAJwD;AAKxDC,EAAAA,WALwD;AAMxDC,EAAAA;AANwD,CAAD,KAOpC;AAAA;;AACnB,QAAMC,kBAAkB,GAAIC,IAAD,IAAkB;AAC3C,WAAQ,4IAA2IA,IAAK,UAAxJ;AACD,GAFD;;AAIA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BpB,QAAQ,CAAa,EAAb,CAA5C;AACA,QAAM;AAAEqB,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MAA0CxB,KAAK,CAACyB,UAAN,CAC9Cf,mBAD8C,CAAhD;AAIAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiB,OAAJ,EAAaQ,OAAO,CAACC,WAAR,CAAoBC,GAApB,CAAwBC,UAAxB,CAAmCC,aAAnC,GAAmD,KAAnD;;AACb,UAAMC,QAAQ,GAAG,MAAM;AACrB,YAAMC,QAAoB,GAAG,EAA7B;;AAEA,UAAInB,IAAJ,EAAU;AACR,aAAK,IAAIoB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAGpB,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEqB,MAAT,CAAjB,EAAkCD,CAAC,EAAnC,EAAuC;AAAA;;AACrC,gBAAME,GAAa,GAAG;AACpBf,YAAAA,IAAI,EAAE,EADc;AAEpBgB,YAAAA,KAAK,EAAE,EAFa;AAGpBvB,YAAAA,IAAI,EAAE;AAHc,WAAtB;AAKA,gBAAMwB,KAAe,GAAG,EAAxB;AACA,gBAAMC,SAAS,cAAGzB,IAAI,CAACoB,CAAD,CAAP,4CAAG,QAAU,CAAV,CAAlB;AACAK,UAAAA,SAAS,IACPD,KAAK,CAACE,IAAN,CAAWC,MAAM,CAACC,IAAI,CAACC,GAAL,CAASF,MAAM,CAACF,SAAD,CAAf,EAA4BK,OAA5B,EAAD,CAAjB,CADF;AAEA,gBAAMC,WAAW,GAAGC,MAAM,aAAChC,IAAI,CAACoB,CAAD,CAAL,6CAAC,SAAU,CAAV,CAAD,CAA1B;AACAE,UAAAA,GAAG,CAACf,IAAJ,GAAWD,kBAAkB,CAC3ByB,WAAW,GAAGA,WAAH,GAAkB,WAAUX,CAAE,EADd,CAA7B;AAGAI,UAAAA,KAAK,CAAC,CAAD,CAAL,GAAWS,QAAQ,CAACT,KAAK,CAAC,CAAD,CAAL,CAASU,QAAT,GAAoBC,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAD,CAAnB;AACAb,UAAAA,GAAG,CAACtB,IAAJ,GAAWwB,KAAX;AACA,gBAAMY,WAAW,GAAGL,WAAW,CAACM,WAAZ,EAApB;AACA,gBAAMd,KAAK,GAAGb,eAAH,aAAGA,eAAH,gDAAGA,eAAe,CAAE4B,IAAjB,CACXC,CAAD,IAAOA,CAAC,CAAER,WAAH,KAAmBK,WADd,CAAH,0DAAG,sBAEXb,KAFH;AAGAD,UAAAA,GAAG,CAACC,KAAJ,GAAYA,KAAK,GAAGA,KAAH,GAAW,EAA5B;AACAJ,UAAAA,QAAQ,CAACO,IAAT,CAAcJ,GAAd;AACD;AACF;;AACDb,MAAAA,aAAa,CAACU,QAAD,CAAb;AACAqB,MAAAA,OAAO,CAACC,GAAR,CAAYtB,QAAZ;AACD,KA9BD;;AA+BAD,IAAAA,QAAQ;AACT,GAlCQ,EAkCN,CAAClB,IAAD,CAlCM,CAAT,CAVmB,CA4CP;;AAEZ,QAAM0C,SAAS,GAAGzD,UAAU,CAAC;AAC3B0D,IAAAA,IAAI,EAAE;AACJC,MAAAA,WAAW,EAAE,CADT;AAEJC,MAAAA,YAAY,EAAE,EAFV;AAGJC,MAAAA,aAAa,EAAE,EAHX;AAIJC,MAAAA,MAAM,EAAE,QAJJ;AAKJC,MAAAA,KAAK,EAAE,GALH;AAMJC,MAAAA,MAAM,EAAE;AANJ,KADqB;AAS3BC,IAAAA,IAAI,EAAE;AACJC,MAAAA,OAAO,EAAE,EADL;AAEJC,MAAAA,OAAO,EAAEjD,UAAU,CAACkD,QAAX,CAAoB,cAApB,IAAsC,GAAtC,GAA4C,CAFjD;AAGJC,MAAAA,UAAU,EAAEnD,UAAU,CAACkD,QAAX,CAAoB,cAApB,IACR,oBADQ,GAER;AALA;AATqB,GAAD,CAA5B;AAkBA,QAAME,OAAO,GAAGb,SAAS,EAAzB;AAEA,QAAM,CAACM,KAAD,IAAUvD,aAAa,EAA7B;AAEA,QAAMoB,OAAY,GAAG;AACnB2C,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAE,KADD;AAELC,MAAAA,eAAe,EAAE,aAFZ;AAGLT,MAAAA,MAAM,EAAE/C,SAAS,GAAG,GAAH,GAAS,GAHrB;AAIL;AACAyD,MAAAA,MAAM,EAAE,IALH;AAMLC,MAAAA,UAAU,EAAE,CANP;AAOLC,MAAAA,WAAW,EAAE;AAPR,KADY;AAUnBC,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAE;AADD,KAVY;AAanBC,IAAAA,KAAK,EAAE;AACLC,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE;AACLC,UAAAA,UAAU,EAAE,OADP;AAELC,UAAAA,QAAQ,EAAE,MAFL;AAGLC,UAAAA,UAAU,EAAE,GAHP;AAIL9C,UAAAA,KAAK,EAAE/B,MAAM,CAAC8E;AAJT;AADD,OADH;AASLC,MAAAA,UAAU,EAAE,CAAC,GAAD,CATP;AAULC,MAAAA,aAAa,EAAEtE,SAAS,GAAG,CAAH,GAAO,CAV1B;AAWLuE,MAAAA,SAAS,EAAEjF,MAAM,CAACkF,aAXb;AAYLC,MAAAA,iBAAiB,EAAEzE,SAAS,GAAG,EAAH,GAAQ;AAZ/B,KAbY;AA4BnB0E,IAAAA,KAAK,EAAE;AACLX,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE;AACLC,UAAAA,UAAU,EAAE,OADP;AAELC,UAAAA,QAAQ,EAAE,MAFL;AAGLC,UAAAA,UAAU,EAAE,GAHP;AAIL9C,UAAAA,KAAK,EAAE/B,MAAM,CAAC8E;AAJT;AADD,OADH;AAULR,MAAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAG,kHAAiHpE,GAAG,CACzHS,WADyH,CAEzH,UAHG;AAILyE,QAAAA,KAAK,EAAE,KAJF;AAKLtC,QAAAA,CAAC,EAAE,CALE;AAMLuC,QAAAA,CAAC,EAAE;AANE,OAVF;AAkBLH,MAAAA,iBAAiB,EAAE,MAlBd;AAoBLI,MAAAA,aAAa,EAAE,aApBV;AAqBLN,MAAAA,SAAS,EAAE;AArBN,KA5BY;AAoDnB3D,IAAAA,WAAW,EAAE;AACXkE,MAAAA,MAAM,EAAE;AACNC,QAAAA,MAAM,EAAE;AACNC,UAAAA,eAAe,EAAE,YAAY;AAC3B,mBAAO,KAAP;AACD;AAHK,SADF;AAMN;AACA;AACA;AACAC,QAAAA,YAAY,EAAEjF,SAAS,GAAG,CAAH,GAAO,GATxB;AAUNkF,QAAAA,UAAU,EAAElF,SAAS,GAAG,EAAH,GAAQ,EAVvB;AAWNmF,QAAAA,YAAY,EAAEnF,SAAS,GAAG,CAAH,GAAO,EAXxB;AAYNoF,QAAAA,MAAM,EAAE;AACNC,UAAAA,QAAQ,EAAE;AACRnC,YAAAA,OAAO,EAAE,CADD;AAERoC,YAAAA,WAAW,EAAE;AAFL,WADJ;AAKNC,UAAAA,MAAM,EAAE;AACND,YAAAA,WAAW,EAAE;AADP,WALF;AAQNE,UAAAA,KAAK,EAAE;AACLC,YAAAA,OAAO,EAAE;AADJ;AARD;AAZF,OADG;AA0BXC,MAAAA,KAAK,EAAE;AACLX,QAAAA,MAAM,EAAE;AACNC,UAAAA,eAAe,EAAE,YAAY;AAC3B;AACA,mBAAO,KAAP;AACD;AAJK;AADH,OA1BI;AAkCXnE,MAAAA,GAAG,EAAE;AACHC,QAAAA,UAAU,EAAE;AACV2E,UAAAA,OAAO,EAAE,IADC;AAEVzB,UAAAA,KAAK,EAAE;AACLC,YAAAA,UAAU,EAAE,OADP;AAELC,YAAAA,QAAQ,EAAE/D,OAAO,GAAG,MAAH,GAAY,MAFxB;AAGLgE,YAAAA,UAAU,EAAE,GAHP;AAILwB,YAAAA,UAAU,EAAE;AAJP,WAFG;AAQV;AACA;AACAf,UAAAA,CAAC,EAAEzE,OAAO,GAAG,CAAC,CAAJ,GAAQ,CAAC,CAVT;AAWVyF,UAAAA,IAAI,EAAE,KAXI;AAYVC,UAAAA,MAAM,EAAE,KAZE;AAaVC,UAAAA,QAAQ,EAAE,OAbA;AAcVC,UAAAA,QAAQ,EAAE,OAdA;AAeVC,UAAAA,SAAS,EAAE,YAAY;AACrB,mBAAO9F,WAAW,CAAC+F,iBAAZ,OAAoC,YAApC,GACHrG,GAAG,CAAC,KAAKgF,CAAL,GAAS,GAAV,EAAe,MAAf,CADA,GAEHhF,GAAG,CAAC,KAAKgF,CAAN,EAAS,KAAT,CAFP;AAGD;AAnBS,SADT;AAsBHQ,QAAAA,MAAM,EAAE;AACNI,UAAAA,KAAK,EAAE;AACLU,YAAAA,UAAU,EAAE;AADP;AADD,SAtBL;AA2BHR,QAAAA,KAAK,EAAE;AACLX,UAAAA,MAAM,EAAE;AACNC,YAAAA,eAAe,EAAE,YAAY;AAC3B;AACA,qBAAO,KAAP;AACD;AAJK;AADH;AA3BJ;AAlCM,KApDM;AA4HnBmB,IAAAA,OAAO,EAAE;AACPC,MAAAA,WAAW,EAAE,GADN;AAEP5C,MAAAA,eAAe,EAAElE,MAAM,CAACkF,aAFjB;AAGP6B,MAAAA,WAAW,EAAE,CAHN;AAIPC,MAAAA,MAAM,EAAE,KAJD;AAKPjF,MAAAA,KAAK,EAAE/B,MAAM,CAACkF,aALP;AAOPR,MAAAA,KAAK,EAAE;AACLf,QAAAA,OAAO,EAAE,EADJ;AAELgB,QAAAA,UAAU,EAAE,OAFP;AAGLE,QAAAA,UAAU,EAAE,GAHP;AAIL;AACA9C,QAAAA,KAAK,EAAE/B,MAAM,CAACiH,kBALT;AAMLrC,QAAAA,QAAQ,EAAE;AANL,OAPA;AAePsC,MAAAA,UAAU,EAAE,UAAU1D,KAAV,EAAsBC,MAAtB,EAAmC2C,KAAnC,EAA+C;AACzD,eAAO;AACLrD,UAAAA,CAAC,EACCZ,MAAM,CAACiE,KAAK,CAACe,KAAP,CAAN,GACAhF,MAAM,CAACiE,KAAK,CAACe,KAAP,CAAN,GAAsB,CADtB,GAEAhF,MAAM,CAACiE,KAAK,CAACe,KAAP,CAAN,GAAsB,CAJnB;AAKL7B,UAAAA,CAAC,EAAEc,KAAK,CAACgB,KAAN,GAAcjF,MAAM,CAACsB,MAAD,CAAN,GAAiB;AAL7B,SAAP;AAOD,OAvBM;AAwBP4D,MAAAA,WAAW,EACTzG,WAAW,CAAC+F,iBAAZ,OAAoC,YAApC,GACK,oIAAD,GACA,OADA,GAEA,eAFA,GAGA,GAJJ,GAKK,oIAAD,GACA,OADA,GAEA,gBAFA,GAGA,GAHA,GAIA/F,WAAW,CAAC+F,iBAAZ;AAlCC,KA5HU;AAiKnBW,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAE,IADH;AAENC,MAAAA,SAAS,EAAE;AAAEnB,QAAAA,UAAU,EAAE;AAAd,OAFL;AAGNzB,MAAAA,QAAQ,EAAE,EAHJ;AAIN6C,MAAAA,MAAM,EAAE,YAJF;AAKNpC,MAAAA,KAAK,EAAE,MALD;AAMN5D,MAAAA,aAAa,EAAE,KANT;AAONsB,MAAAA,CAAC,EAAES,KAAK,GAAG,IAAR,GAAe,CAAC,EAAhB,GAAqB9C,SAAS,GAAG,CAAC,EAAJ,GAAS,CAAC,EAPrC;AAQN4E,MAAAA,CAAC,EAAE5E,SAAS,GAAG,CAAC,EAAJ,GAAS,CAAC,EARhB;AASNgH,MAAAA,YAAY,EAAE,CATR;AAUNC,MAAAA,WAAW,EAAEnE,KAAK,GAAG,IAAR,GAAgB9C,SAAS,GAAG,EAAH,GAAQ,EAAjC,GAAuC,EAV9C;AAWNkH,MAAAA,kBAAkB,EAAE,CAXd;AAYNC,MAAAA,YAAY,EAAE,CAZR;AAaNC,MAAAA,YAAY,EAAE;AAbR,KAjKW;AAgLnBC,IAAAA,OAAO,EAAE;AACP5B,MAAAA,OAAO,EAAE;AADF,KAhLU;AAoLnBX,IAAAA,MAAM,EAAExE;AApLW,GAArB;AAsLA,QAAMgH,aAAa,GAAG5H,eAAe,EAArC;AAEA,sBACE;AAAA,2BACE,QAAC,UAAD;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,SAAS,EAAC,QAA1B;AAAmC,QAAA,SAAS,EAAE2D,OAAO,CAACL,IAAtD;AAAA,gCACE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAA,iCACE,QAAC,UAAD;AAAY,YAAA,SAAS,EAAEsE,aAAa,CAACC,gBAArC;AAAA,sBACG9H,GAAG,CAACQ,UAAD;AADN;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAME,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,KAAK,EAAE;AAAEyC,YAAAA,WAAW,EAAE,CAAf;AAAkBI,YAAAA,KAAK,EAAE;AAAzB,WAAlB;AAAA,iCACE,QAAC,eAAD;AAAiB,YAAA,UAAU,EAAE1D,UAA7B;AAAyC,YAAA,OAAO,EAAEuB;AAAlD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAgBD,CAnRD;;GAAMd,uB;UAyEYN,a,EAwLMG,e;;;KAjQlBG,uB;AAqRN,eAAeA,uBAAf","sourcesContent":["import { Grid, makeStyles, Typography } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { COLORS } from '../../../plTheme';\nimport { useWindowSize } from '../../../utils/hooks/useWindowSize';\nimport WidgetCard from '../../atoms/WidgetCard';\nimport { _t_ } from '../../../utils/translation/translation';\nimport { useGlobalStyles } from '../../../plStyles';\nimport { ProductColorContext } from '../../../utils/productColorContext';\nimport { _n_ } from '../../../utils/numerals/numerals';\n\ninterface BarGraphProps {\n  data?: (string | number | null | undefined)[][];\n  activeQuarter: number | null | undefined;\n  reportInd: boolean;\n  chartTitle: string;\n  xAxisTitile: string;\n  repLens?: boolean;\n}\n\ninterface InitData {\n  data?: number[];\n  name: string;\n  color: string;\n}\n\nconst ProductPenetrationGraph: React.FC<BarGraphProps> = ({\n  data,\n  activeQuarter,\n  reportInd,\n  chartTitle,\n  xAxisTitile,\n  repLens,\n}: BarGraphProps) => {\n  const displayProductName = (name: string) => {\n    return `<span style=\"font-size: 12px; font-family: Rubik; font-weight: normal;letter-spacing: 0.01em;color: #171F46;text-transform: uppercase;\"> ${name} </span>`;\n  };\n\n  const [seriesData, setSeriesData] = useState<InitData[]>([]);\n  const { ProductColorMap, setProductColorMap } = React.useContext(\n    ProductColorContext,\n  );\n\n  useEffect(() => {\n    if (repLens) options.plotOptions.bar.dataLabels.verticalAlign = 'top';\n    const loadData = () => {\n      const tempData: InitData[] = [];\n\n      if (data) {\n        for (let i = 0; i < data?.length; i++) {\n          const obj: InitData = {\n            name: '',\n            color: '',\n            data: [],\n          };\n          const value: number[] = [];\n          const dealCount = data[i]?.[1];\n          dealCount &&\n            value.push(Number(Math.abs(Number(dealCount)).toFixed()));\n          const productName = String(data[i]?.[0]);\n          obj.name = displayProductName(\n            productName ? productName : `Product ${i}`,\n          );\n          value[0] = parseInt(value[0].toString().slice(0, 3));\n          obj.data = value;\n          const smallerName = productName.toLowerCase();\n          const color = ProductColorMap?.find(\n            (x) => x!.productName === smallerName,\n          )?.color;\n          obj.color = color ? color : '';\n          tempData.push(obj);\n        }\n      }\n      setSeriesData(tempData);\n      console.log(tempData);\n    };\n    loadData();\n  }, [data]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const useStyles = makeStyles({\n    root: {\n      paddingLeft: 8,\n      paddingRight: 27,\n      paddingBottom: 20,\n      margin: '0 auto',\n      width: 405,\n      height: 301,\n    },\n    main: {\n      padding: 16,\n      opacity: chartTitle.includes('gross margin') ? 0.6 : 1,\n      background: chartTitle.includes('gross margin')\n        ? 'rgb(217, 217, 217)'\n        : 'white',\n    },\n  });\n\n  const classes = useStyles();\n\n  const [width] = useWindowSize();\n\n  const options: any = {\n    chart: {\n      type: 'bar',\n      backgroundColor: 'transparent',\n      height: reportInd ? 135 : 245,\n      // width: '100%',\n      reflow: true,\n      marginLeft: 0,\n      marginRight: 50,\n    },\n    title: {\n      text: ' ',\n    },\n    xAxis: {\n      labels: {\n        style: {\n          fontFamily: 'Rubik',\n          fontSize: '12px',\n          fontWeight: 500,\n          color: COLORS.BARGRAPH_LABEL,\n        },\n      },\n      categories: [' '],\n      gridLineWidth: reportInd ? 0 : 1,\n      lineColor: COLORS.GENERAL_WHITE,\n      gridLineDashStyle: reportInd ? '' : 'Dash',\n    },\n\n    yAxis: {\n      labels: {\n        style: {\n          fontFamily: 'Rubik',\n          fontSize: '12px',\n          fontWeight: 500,\n          color: COLORS.BARGRAPH_LABEL,\n        },\n      },\n\n      title: {\n        text: `<span style=\"font-size: 12px; font-family: Rubik; font-weight: normal;text-transform: uppercase;fill:#171F46\" >${_t_(\n          xAxisTitile,\n        )}</span> `,\n        align: 'low',\n        x: 0,\n        y: 10,\n      },\n      gridLineDashStyle: 'Dash',\n\n      gridLineColor: 'transparent',\n      lineColor: 'transparent',\n    },\n\n    plotOptions: {\n      series: {\n        events: {\n          legendItemClick: function () {\n            return false;\n          },\n        },\n        // groupPadding: reportInd ? 1 : 0.1,\n        // pointWidth: reportInd ? 15 : repLens ? 15 : 20,\n        // borderRadius: reportInd ? 8 : repLens ? 8 : 15,\n        groupPadding: reportInd ? 1 : 0.1,\n        pointWidth: reportInd ? 11 : 26,\n        borderRadius: reportInd ? 5 : 15,\n        states: {\n          inactive: {\n            opacity: 1,\n            borderColor: 'transparent',\n          },\n          active: {\n            borderColor: 'transparent',\n          },\n          hover: {\n            enabled: false,\n          },\n        },\n      },\n      point: {\n        events: {\n          legendItemClick: function () {\n            // this.slice(null);\n            return false;\n          },\n        },\n      },\n      bar: {\n        dataLabels: {\n          enabled: true,\n          style: {\n            fontFamily: 'Rubik',\n            fontSize: repLens ? '10px' : '14px',\n            fontWeight: 300,\n            lineHeight: '14px',\n          },\n          // verticalAlign: reportInd ? 'top' : 'bottom',\n          // verticalAlign: seriesData.length > 3 ? 'bottom' : 'top',\n          y: repLens ? -6 : -1,\n          crop: false,\n          inside: false,\n          overflow: 'allow',\n          position: 'right',\n          formatter: function () {\n            return xAxisTitile.toLocaleUpperCase() === 'PERCENTAGE'\n              ? _n_(this.y / 100, '0.0%')\n              : _n_(this.y, '0,0');\n          },\n        },\n        states: {\n          hover: {\n            brightness: 0,\n          },\n        },\n        point: {\n          events: {\n            legendItemClick: function () {\n              // this.slice(null);\n              return false;\n            },\n          },\n        },\n      },\n    },\n\n    tooltip: {\n      valueSuffix: '%',\n      backgroundColor: COLORS.GENERAL_WHITE,\n      borderWidth: 0,\n      shadow: false,\n      color: COLORS.GENERAL_WHITE,\n\n      style: {\n        padding: 15,\n        fontFamily: 'Rubik',\n        fontWeight: 500,\n        // fontSize: 12,\n        color: COLORS.TEXT_HIGH_EMPHASIS,\n        fontSize: 13,\n      },\n      positioner: function (width: any, height: any, point: any) {\n        return {\n          x:\n            Number(point.plotX) -\n            Number(point.plotX) / 2 -\n            Number(point.plotX) / 8,\n          y: point.plotY - Number(height) / 4,\n        };\n      },\n      pointFormat:\n        xAxisTitile.toLocaleUpperCase() === 'PERCENTAGE'\n          ? `<span style=\"font-size: 12px; font-family: Rubik; font-weight: bold;text-transform: uppercase;fill:#171F46\" >{series.name}</span> ` +\n            '</br>' +\n            '{point.y:.1f}' +\n            '%'\n          : `<span style=\"font-size: 12px; font-family: Rubik; font-weight: bold;text-transform: uppercase;fill:#171F46\" >{series.name}</span> ` +\n            '</br>' +\n            '{point.y:.0f} ' +\n            ' ' +\n            xAxisTitile.toLocaleUpperCase(),\n    },\n\n    legend: {\n      useHTML: true,\n      itemStyle: { lineHeight: '20px' },\n      fontSize: 12,\n      layout: 'horizontal',\n      align: 'left',\n      verticalAlign: 'top',\n      x: width < 1500 ? -20 : reportInd ? -18 : -20,\n      y: reportInd ? -15 : -15,\n      symbolHeight: 5,\n      symbolWidth: width < 1500 ? (reportInd ? 12 : 15) : 15,\n      symbolBorderRadius: 2,\n      symbolRadius: 2,\n      squareSymbol: false,\n    },\n    credits: {\n      enabled: false,\n    },\n\n    series: seriesData,\n  };\n  const globalClasses = useGlobalStyles();\n\n  return (\n    <>\n      <WidgetCard>\n        <Grid container direction=\"column\" className={classes.main}>\n          <Grid item>\n            <Typography className={globalClasses.body1WidgetTitle}>\n              {_t_(chartTitle)}\n            </Typography>\n          </Grid>\n          <Grid item style={{ paddingLeft: 1, width: '100%' }}>\n            <HighchartsReact highcharts={Highcharts} options={options} />\n          </Grid>\n        </Grid>\n      </WidgetCard>\n    </>\n  );\n};\n\nexport default ProductPenetrationGraph;\n"]},"metadata":{},"sourceType":"module"}