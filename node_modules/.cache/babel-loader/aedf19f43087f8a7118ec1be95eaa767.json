{"ast":null,"code":"var _jsxFileName = \"/home/komal/Documents/Current/peoplelens_ui/src/components/organisms/RepRatingChart/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { Grid, makeStyles } from '@material-ui/core';\nimport { _t_ } from '../../../utils/translation/translation';\nimport { COLORS } from '../../../plTheme';\nimport RatingChart from '../../molecules/RatingChart';\nimport { useGlobalStyles } from '../../../plStyles';\nimport { useWindowSize } from '../../../utils/hooks/useWindowSize';\nimport { useQuery } from '@apollo/client';\nimport { GetSalesOKR } from '../../../gql/queries/salesOKR';\nimport Loader from '../../atoms/Loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst RepRatingChartWidget = ({\n  startDate,\n  endDate\n}) => {\n  _s();\n\n  var _data2$RepDashboardDa, _competencies$compete;\n\n  const [width] = useWindowSize();\n  const useStyles = makeStyles({\n    ratingElement: {},\n    reportsratingElement: {},\n    subHeading: {\n      // marginTop: 30,\n      color: COLORS.TEXT_HIGH_EMPHASIS\n    },\n    root: {\n      height: 410,\n      padding: 15,\n      backgroundColor: 'white'\n    },\n    heading: {// marginLeft: width < 1500 ? (width < 1300 ? -170 : -205) : -320,\n    },\n    chartElement1: {\n      // marginRight: width < 1500 ? 60 : 40,\n      marginTop: 20\n    },\n    chartElement2: {\n      // marginRight: width < 1500 ? 60 : 40,\n      marginTop: width < 1500 ? -8 : -10\n    },\n    subHeading1: {// marginTop: -10,\n      // color: COLORS.TEXT_HIGH_EMPHASIS,\n    },\n    subElement1: {},\n    subElement2: {}\n  });\n  const classes = useStyles();\n  const globalClasses = useGlobalStyles(); // const [width] = useWindowSize();\n\n  const {\n    loading: loading2,\n    error: error2,\n    data: data2,\n    refetch: refetch2\n  } = useQuery(GetSalesOKR, {\n    variables: {\n      repDashboardInput: {\n        startDate: startDate,\n        endDate: endDate\n      }\n    }\n  });\n  useEffect(() => {\n    void refetch2();\n  }, [refetch2]);\n\n  if (loading2) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n  if (error2) return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\"`Error! $\", error2.message, \"` \"]\n  }, void 0, true);\n  const competencies = data2 === null || data2 === void 0 ? void 0 : (_data2$RepDashboardDa = data2.RepDashboardData) === null || _data2$RepDashboardDa === void 0 ? void 0 : _data2$RepDashboardDa.okrSummary;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: classes.root,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        className: `${globalClasses.body1WidgetTitle}`,\n        children: _t_('COMPETENCIES')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"column\",\n        \"data-testid\": \"RatingChart\",\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"column\",\n            style: {\n              paddingLeft: 15\n            },\n            children: competencies && (competencies === null || competencies === void 0 ? void 0 : competencies.competency) && (competencies === null || competencies === void 0 ? void 0 : (_competencies$compete = competencies.competency) === null || _competencies$compete === void 0 ? void 0 : _competencies$compete.map((element, index) => {\n              var _element$values;\n\n              return index === 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: element && element.values && ((_element$values = element.values) === null || _element$values === void 0 ? void 0 : _element$values.map((innerElement, index) => /*#__PURE__*/_jsxDEV(Grid, {\n                  container: true,\n                  direction: \"row\",\n                  justify: \"space-between\",\n                  style: {\n                    marginTop: '2.2rem'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    className: classes.heading,\n                    xs: 6,\n                    children: /*#__PURE__*/_jsxDEV(Typography, {\n                      className: index === 0 ? `${classes.subHeading}` : `${classes.subHeading1}`,\n                      variant: \"h5\",\n                      children: innerElement === null || innerElement === void 0 ? void 0 : innerElement.title\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 111,\n                      columnNumber: 31\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 110,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    className: index === 0 ? `${classes.chartElement2}` : `${classes.chartElement2}`,\n                    xs: 6,\n                    children: [' ', /*#__PURE__*/_jsxDEV(RatingChart, {\n                      value: Math.ceil((innerElement === null || innerElement === void 0 ? void 0 : innerElement.managerScore) ? innerElement === null || innerElement === void 0 ? void 0 : innerElement.managerScore : 0),\n                      indicator: 'customized'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 132,\n                      columnNumber: 31\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 122,\n                    columnNumber: 29\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 103,\n                  columnNumber: 27\n                }, this)))\n              }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n            }))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(RepRatingChartWidget, \"Gl3ycCuLzOVTB+EjX9Kdnxl2KSc=\", true, function () {\n  return [useWindowSize, useGlobalStyles, useQuery];\n});\n\n_c = RepRatingChartWidget;\nexport default RepRatingChartWidget;\n\nvar _c;\n\n$RefreshReg$(_c, \"RepRatingChartWidget\");","map":{"version":3,"sources":["/home/komal/Documents/Current/peoplelens_ui/src/components/organisms/RepRatingChart/index.tsx"],"names":["React","useEffect","Typography","Grid","makeStyles","_t_","COLORS","RatingChart","useGlobalStyles","useWindowSize","useQuery","GetSalesOKR","Loader","RepRatingChartWidget","startDate","endDate","width","useStyles","ratingElement","reportsratingElement","subHeading","color","TEXT_HIGH_EMPHASIS","root","height","padding","backgroundColor","heading","chartElement1","marginTop","chartElement2","subHeading1","subElement1","subElement2","classes","globalClasses","loading","loading2","error","error2","data","data2","refetch","refetch2","variables","repDashboardInput","message","competencies","RepDashboardData","okrSummary","body1WidgetTitle","paddingLeft","competency","map","element","index","values","innerElement","title","Math","ceil","managerScore"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { Grid, makeStyles } from '@material-ui/core';\nimport { _t_ } from '../../../utils/translation/translation';\nimport { COLORS } from '../../../plTheme';\nimport WidgetCard from '../../atoms/WidgetCard';\nimport RatingChart from '../../molecules/RatingChart';\nimport { useGlobalStyles } from '../../../plStyles';\nimport { useWindowSize } from '../../../utils/hooks/useWindowSize';\nimport { RepDashboardData_RepDashboardData_okrSummary as competenciesData } from '../../../gql/types';\nimport { dates } from '../ManagerDashboard';\nimport { QueryResult, useQuery } from '@apollo/client';\nimport { RepDashboardData as DashboardData } from '../../../gql/types';\nimport { GetSalesOKR } from '../../../gql/queries/salesOKR';\nimport Loader from '../../atoms/Loader';\n\ninterface RepRatingChartWidgetProps {\n  startDate?: string;\n  endDate?: string;\n}\n\nconst RepRatingChartWidget: React.FC<RepRatingChartWidgetProps> = ({\n  startDate,\n  endDate,\n}: RepRatingChartWidgetProps) => {\n  const [width] = useWindowSize();\n  const useStyles = makeStyles({\n    ratingElement: {},\n    reportsratingElement: {},\n    subHeading: {\n      // marginTop: 30,\n      color: COLORS.TEXT_HIGH_EMPHASIS,\n    },\n    root: {\n      height: 410,\n      padding: 15,\n      backgroundColor: 'white',\n    },\n    heading: {\n      // marginLeft: width < 1500 ? (width < 1300 ? -170 : -205) : -320,\n    },\n    chartElement1: {\n      // marginRight: width < 1500 ? 60 : 40,\n      marginTop: 20,\n    },\n    chartElement2: {\n      // marginRight: width < 1500 ? 60 : 40,\n      marginTop: width < 1500 ? -8 : -10,\n    },\n    subHeading1: {\n      // marginTop: -10,\n      // color: COLORS.TEXT_HIGH_EMPHASIS,\n    },\n    subElement1: {},\n    subElement2: {},\n  });\n  const classes = useStyles();\n  const globalClasses = useGlobalStyles();\n  // const [width] = useWindowSize();\n  const {\n    loading: loading2,\n    error: error2,\n    data: data2,\n    refetch: refetch2,\n  }: QueryResult<DashboardData> = useQuery(GetSalesOKR, {\n    variables: {\n      repDashboardInput: {\n        startDate: startDate,\n        endDate: endDate,\n      },\n    },\n  });\n  useEffect(() => {\n    void refetch2();\n  }, [refetch2]);\n\n  if (loading2) {\n    return (\n      <>\n        <Loader />\n      </>\n    );\n  }\n  if (error2) return <>`Error! ${error2.message}` </>;\n  const competencies = data2?.RepDashboardData?.okrSummary;\n  return (\n    <>\n      <Grid container className={classes.root}>\n        <Typography className={`${globalClasses.body1WidgetTitle}`}>\n          {_t_('COMPETENCIES')}\n        </Typography>\n        <Grid container direction=\"column\" data-testid=\"RatingChart\">\n          <Grid item>\n            <Grid container direction=\"column\" style={{ paddingLeft: 15 }}>\n              {competencies &&\n                competencies?.competency &&\n                competencies?.competency?.map((element, index) =>\n                  index === 0 ? (\n                    <>\n                      {element &&\n                        element.values &&\n                        element.values?.map((innerElement, index) => (\n                          <Grid\n                            key={index}\n                            container\n                            direction=\"row\"\n                            justify=\"space-between\"\n                            style={{ marginTop: '2.2rem' }}\n                          >\n                            <Grid item className={classes.heading} xs={6}>\n                              <Typography\n                                className={\n                                  index === 0\n                                    ? `${classes.subHeading}`\n                                    : `${classes.subHeading1}`\n                                }\n                                variant=\"h5\"\n                              >\n                                {innerElement?.title}\n                              </Typography>\n                            </Grid>\n                            <Grid\n                              item\n                              className={\n                                index === 0\n                                  ? `${classes.chartElement2}`\n                                  : `${classes.chartElement2}`\n                              }\n                              xs={6}\n                            >\n                              {' '}\n                              <RatingChart\n                                value={Math.ceil(\n                                  innerElement?.managerScore\n                                    ? innerElement?.managerScore\n                                    : 0,\n                                )}\n                                indicator={'customized'}\n                              />\n                            </Grid>\n                          </Grid>\n                        ))}\n                    </>\n                  ) : (\n                    <></>\n                  ),\n                )}\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default RepRatingChartWidget;\n"]},"metadata":{},"sourceType":"module"}