{"ast":null,"code":"var _jsxFileName = \"/home/komal/Documents/Current/peoplelens_ui/src/components/molecules/LearningBarGraph/index.tsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable @typescript-eslint/restrict-plus-operands */\n\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/* eslint-disable @typescript-eslint/ban-ts-comment */\n\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport React, { useEffect } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { COLORS } from '../../../plTheme';\nimport { Grid, makeStyles, Typography } from '@material-ui/core';\nimport { useGlobalStyles } from '../../../plStyles';\nimport { _t_ } from '../../../utils/translation/translation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst LearningBarGraph = ({\n  data,\n  title\n}) => {\n  _s();\n\n  const [receivedData, setReceivedData] = React.useState(data);\n  useEffect(() => {\n    setReceivedData(data);\n  }, [data]);\n  const [chartSeriesData, setChartSeriesData] = React.useState([]);\n  useEffect(() => {\n    const seriesData = [];\n\n    if (data) {\n      for (const item of data) {\n        (item === null || item === void 0 ? void 0 : item.name) && (item === null || item === void 0 ? void 0 : item.value) !== undefined && seriesData.push([_t_(item === null || item === void 0 ? void 0 : item.name), (item === null || item === void 0 ? void 0 : item.value) && (item === null || item === void 0 ? void 0 : item.value)]);\n      }\n    }\n\n    setChartSeriesData(seriesData); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data, receivedData]);\n  const options = {\n    exporting: {\n      enabled: false\n    },\n    credits: {\n      enabled: false\n    },\n    chart: {\n      type: 'column',\n      height: 230\n    },\n    title: {\n      text: null\n    },\n    subtitle: {\n      text: null\n    },\n    xAxis: {\n      type: 'category',\n      labels: {\n        rotation: 0,\n        y: 35,\n        style: {\n          fontFamily: 'Mulish',\n          fontSize: '11px',\n          fontWeight: 600,\n          lineHeight: 15,\n          letterSpacing: 0.1,\n          color: COLORS.LEARNER_BAR_LABEL\n        }\n      }\n    },\n    yAxis: {\n      min: 0,\n      // max: 5,\n      title: {\n        text: null\n      },\n      plotLines: [{\n        dashStyle: 'dash'\n      }],\n      gridLineColor: COLORS.GREY_40,\n      gridLineDashStyle: 'dash',\n      labels: {\n        rotation: 0,\n        style: {\n          fontFamily: 'Helvetica',\n          fontSize: '11px',\n          fontWeight: 200,\n          lineHeight: 15,\n          letterSpacing: 0.1,\n          color: COLORS.BARGRAPH_LABEL\n        }\n      }\n    },\n    legend: {\n      enabled: false\n    },\n    tooltip: {\n      // pointFormat:\n      //   `<span style=\"font-size: 12px; font-family: Rubik; font-weight: bold;text-transform: uppercase;fill:#171F46\" >{point.x}</span> ` +\n      //   '</br>' + '{point.y:.1f}' + '%',\n      //   `{point.y:.1f}`,\n      backgroundColor: COLORS.GENERAL_WHITE,\n      borderWidth: 1,\n      borderColor: 'RGBA(126, 133, 142, 0.2)',\n      shape: 'rect',\n      shadow: false,\n      color: COLORS.GENERAL_WHITE,\n      style: {\n        padding: 15,\n        fontFamily: 'Rubik',\n        fontWeight: 500,\n        // fontSize: 12,\n        color: COLORS.TEXT_HIGH_EMPHASIS,\n        fontSize: 13\n      },\n      formatter: function () {\n        // @ts-ignore\n        const name = // @ts-ignore\n        this && this.point && this.point.name ? // @ts-ignore\n        this.point.name.toString() : '';\n        const value = // @ts-ignore\n        this && this.point && this.point.y ? // @ts-ignore\n        this.point.y.toString() : ''; // @ts-ignore\n\n        let tooltip = ``;\n        tooltip += `<span style=\"text-transform: uppercase; font-weight: 400 \">` + name + `</span></br>`;\n        tooltip += `<span style=\"text-transform: uppercase;\">` + value + `</span>`;\n        tooltip += ``;\n        return tooltip;\n      }\n    },\n    plotOptions: {\n      series: {\n        borderRadius: 3,\n        groupPadding: 0.5,\n        states: {\n          inactive: {\n            opacity: 1\n          },\n          active: {\n            opacity: 1\n          },\n          hover: {\n            enabled: false,\n            halo: null\n          }\n        }\n      },\n      column: {\n        pointWidth: 27\n      },\n      line: {\n        dashStyle: 'longdash'\n      }\n    },\n    series: [{\n      name: 'Participation',\n      data: chartSeriesData,\n      color: {\n        linearGradient: {\n          x1: 0,\n          x2: 0,\n          y1: 0,\n          y2: 1\n        },\n        stops: [[0, '#80CBF1'], [1, '#29B695']]\n      },\n      dataLabels: {\n        enabled: false\n      }\n    }]\n  };\n  const globalClasses = useGlobalStyles();\n  const useStyles = makeStyles({\n    barTitle: {\n      width: '100%'\n    },\n    title: {\n      marginLeft: 8,\n      width: '100%',\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis'\n    }\n  });\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"column\",\n      justify: \"flex-start\",\n      alignItems: \"center\",\n      style: {\n        width: '100%'\n      },\n      spacing: 5,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        className: classes.barTitle,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          color: \"textPrimary\",\n          align: \"center\",\n          className: `${globalClasses.h5Medium} ${classes.title}`,\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        style: {\n          width: '100%'\n        },\n        children: /*#__PURE__*/_jsxDEV(HighchartsReact, {\n          highcharts: Highcharts,\n          options: options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(LearningBarGraph, \"KcsPPjIgUN+sbfscf09fmf2iMnI=\", true, function () {\n  return [useGlobalStyles];\n});\n\n_c = LearningBarGraph;\nexport default LearningBarGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"LearningBarGraph\");","map":{"version":3,"sources":["/home/komal/Documents/Current/peoplelens_ui/src/components/molecules/LearningBarGraph/index.tsx"],"names":["React","useEffect","Highcharts","HighchartsReact","COLORS","Grid","makeStyles","Typography","useGlobalStyles","_t_","LearningBarGraph","data","title","receivedData","setReceivedData","useState","chartSeriesData","setChartSeriesData","seriesData","item","name","value","undefined","push","options","exporting","enabled","credits","chart","type","height","text","subtitle","xAxis","labels","rotation","y","style","fontFamily","fontSize","fontWeight","lineHeight","letterSpacing","color","LEARNER_BAR_LABEL","yAxis","min","plotLines","dashStyle","gridLineColor","GREY_40","gridLineDashStyle","BARGRAPH_LABEL","legend","tooltip","backgroundColor","GENERAL_WHITE","borderWidth","borderColor","shape","shadow","padding","TEXT_HIGH_EMPHASIS","formatter","point","toString","plotOptions","series","borderRadius","groupPadding","states","inactive","opacity","active","hover","halo","column","pointWidth","line","linearGradient","x1","x2","y1","y2","stops","dataLabels","globalClasses","useStyles","barTitle","width","marginLeft","whiteSpace","overflow","textOverflow","classes","h5Medium"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/restrict-plus-operands */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/ban-ts-comment */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport React, { useEffect } from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { COLORS } from '../../../plTheme';\nimport { Grid, makeStyles, Typography } from '@material-ui/core';\nimport { useGlobalStyles } from '../../../plStyles';\nimport { getLearningData_getLearningData_learningParticipation } from '../../../gql/types';\nimport { _t_ } from '../../../utils/translation/translation';\n\nexport interface ChartSeriesProps {\n  name?: string;\n  value?: number;\n}\n\nexport interface LearningBarGraphProps {\n  data: // eslint-disable-next-line camelcase\n  | (getLearningData_getLearningData_learningParticipation | null)[]\n    | null\n    | undefined\n    | ChartSeriesProps[];\n  title: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst LearningBarGraph: React.FC<LearningBarGraphProps> = ({\n  data,\n  title,\n}: LearningBarGraphProps) => {\n  const [receivedData, setReceivedData] = React.useState(data);\n\n  useEffect(() => {\n    setReceivedData(data);\n  }, [data]);\n  const [chartSeriesData, setChartSeriesData] = React.useState<\n    [string, number | null][]\n  >([]);\n  useEffect(() => {\n    const seriesData: [string, number | null][] = [];\n    if (data) {\n      for (const item of data) {\n        item?.name &&\n          item?.value !== undefined &&\n          seriesData.push([_t_(item?.name), item?.value && item?.value]);\n      }\n    }\n    setChartSeriesData(seriesData);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data, receivedData]);\n\n  const options = {\n    exporting: {\n      enabled: false,\n    },\n    credits: {\n      enabled: false,\n    },\n    chart: {\n      type: 'column',\n      height: 230,\n    },\n    title: {\n      text: null,\n    },\n    subtitle: {\n      text: null,\n    },\n    xAxis: {\n      type: 'category',\n      labels: {\n        rotation: 0,\n        y: 35,\n        style: {\n          fontFamily: 'Mulish',\n          fontSize: '11px',\n          fontWeight: 600,\n          lineHeight: 15,\n          letterSpacing: 0.1,\n          color: COLORS.LEARNER_BAR_LABEL,\n        },\n      },\n    },\n    yAxis: {\n      min: 0,\n      // max: 5,\n      title: {\n        text: null,\n      },\n      plotLines: [\n        {\n          dashStyle: 'dash',\n        },\n      ],\n      gridLineColor: COLORS.GREY_40,\n      gridLineDashStyle: 'dash',\n      labels: {\n        rotation: 0,\n        style: {\n          fontFamily: 'Helvetica',\n          fontSize: '11px',\n          fontWeight: 200,\n          lineHeight: 15,\n          letterSpacing: 0.1,\n          color: COLORS.BARGRAPH_LABEL,\n        },\n      },\n    },\n    legend: {\n      enabled: false,\n    },\n    tooltip: {\n      // pointFormat:\n      //   `<span style=\"font-size: 12px; font-family: Rubik; font-weight: bold;text-transform: uppercase;fill:#171F46\" >{point.x}</span> ` +\n      //   '</br>' + '{point.y:.1f}' + '%',\n      //   `{point.y:.1f}`,\n      backgroundColor: COLORS.GENERAL_WHITE,\n      borderWidth: 1,\n      borderColor: 'RGBA(126, 133, 142, 0.2)',\n      shape: 'rect',\n      shadow: false,\n      color: COLORS.GENERAL_WHITE,\n\n      style: {\n        padding: 15,\n        fontFamily: 'Rubik',\n        fontWeight: 500,\n        // fontSize: 12,\n        color: COLORS.TEXT_HIGH_EMPHASIS,\n        fontSize: 13,\n      },\n      formatter: function () {\n        // @ts-ignore\n        const name =\n          // @ts-ignore\n          this && this.point && this.point.name\n            ? // @ts-ignore\n              this.point.name.toString()\n            : '';\n\n        const value =\n          // @ts-ignore\n          this && this.point && this.point.y\n            ? // @ts-ignore\n              this.point.y.toString()\n            : '';\n\n        // @ts-ignore\n        let tooltip = ``;\n\n        tooltip +=\n          `<span style=\"text-transform: uppercase; font-weight: 400 \">` +\n          name +\n          `</span></br>`;\n        tooltip +=\n          `<span style=\"text-transform: uppercase;\">` + value + `</span>`;\n\n        tooltip += ``;\n        return tooltip;\n      },\n    },\n    plotOptions: {\n      series: {\n        borderRadius: 3,\n        groupPadding: 0.5,\n        states: {\n          inactive: {\n            opacity: 1,\n          },\n          active: {\n            opacity: 1,\n          },\n          hover: {\n            enabled: false,\n            halo: null,\n          },\n        },\n      },\n      column: {\n        pointWidth: 27,\n      },\n      line: {\n        dashStyle: 'longdash',\n      },\n    },\n\n    series: [\n      {\n        name: 'Participation',\n        data: chartSeriesData,\n        color: {\n          linearGradient: {\n            x1: 0,\n            x2: 0,\n            y1: 0,\n            y2: 1,\n          },\n          stops: [\n            [0, '#80CBF1'],\n            [1, '#29B695'],\n          ],\n        },\n        dataLabels: {\n          enabled: false,\n        },\n      },\n    ],\n  };\n\n  const globalClasses = useGlobalStyles();\n\n  const useStyles = makeStyles({\n    barTitle: {\n      width: '100%',\n    },\n    title: {\n      marginLeft: 8,\n      width: '100%',\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n    },\n  });\n\n  const classes = useStyles();\n\n  return (\n    <>\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"flex-start\"\n        alignItems=\"center\"\n        style={{ width: '100%' }}\n        spacing={5}\n      >\n        <Grid item className={classes.barTitle}>\n          <Typography\n            variant=\"h5\"\n            color=\"textPrimary\"\n            align=\"center\"\n            className={`${globalClasses.h5Medium} ${classes.title}`}\n          >\n            {title}\n          </Typography>\n        </Grid>\n        <Grid item style={{ width: '100%' }}>\n          <HighchartsReact highcharts={Highcharts} options={options} />\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default LearningBarGraph;\n"]},"metadata":{},"sourceType":"module"}