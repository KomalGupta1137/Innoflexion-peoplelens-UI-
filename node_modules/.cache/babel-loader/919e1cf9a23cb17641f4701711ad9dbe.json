{"ast":null,"code":"var _jsxFileName = \"/home/komal/Documents/Current/peoplelens_ui/src/components/organisms/LearningContainer/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useQuery } from '@apollo/client';\nimport { Grid, makeStyles } from '@material-ui/core';\nimport React, { useEffect } from 'react';\nimport { GetLearningData } from '../../../gql/queries/learning';\nimport { _t_ } from '../../../utils/translation/translation';\nimport LearningBarGraph from '../../molecules/LearningBarGraph';\nimport { dates } from '../ManagerDashboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst LearningContainer = ({\n  activeQuarter,\n  activeProductId\n}) => {\n  _s();\n\n  const useStyles = makeStyles({\n    graphDiv: {\n      height: '100%',\n      padding: '4% 3.8%'\n    }\n  });\n  const [activeProd, setActiveProd] = React.useState(activeProductId);\n  useEffect(() => {\n    setActiveProd(activeProductId);\n  }, [activeProductId]);\n  const {\n    data,\n    refetch\n  } = useQuery(GetLearningData, {\n    variables: {\n      learningInput: {\n        startDate: activeQuarter !== undefined ? dates[activeQuarter].startDate : '',\n        endDate: activeQuarter !== undefined ? dates[activeQuarter].endDate : '',\n        productId: activeProductId === '' ? null : activeProductId\n      }\n    }\n  });\n  useEffect(() => {\n    void refetch();\n  }, [activeQuarter, refetch, activeProd]); // eslint-disable-next-line camelcase\n\n  const learningData = data === null || data === void 0 ? void 0 : data.getLearningData;\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"center\",\n      alignItems: \"center\",\n      style: {\n        width: '100%',\n        height: 363\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        className: classes.graphDiv,\n        children: /*#__PURE__*/_jsxDEV(LearningBarGraph, {\n          title: _t_('Learning Module Participation'),\n          data: learningData === null || learningData === void 0 ? void 0 : learningData.learningParticipation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        className: classes.graphDiv,\n        children: /*#__PURE__*/_jsxDEV(LearningBarGraph, {\n          title: _t_('Learner Assessment'),\n          data: learningData === null || learningData === void 0 ? void 0 : learningData.learnerAssessments\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        className: classes.graphDiv,\n        children: [' ', /*#__PURE__*/_jsxDEV(LearningBarGraph, {\n          title: _t_('Learner Satisfaction'),\n          data: learningData === null || learningData === void 0 ? void 0 : learningData.learnerSatisfaction\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(LearningContainer, \"+fR3mG1Ttpcy6zhx+/LPmVsptU0=\", true, function () {\n  return [useQuery];\n});\n\n_c = LearningContainer;\nexport default LearningContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"LearningContainer\");","map":{"version":3,"sources":["/home/komal/Documents/Current/peoplelens_ui/src/components/organisms/LearningContainer/index.tsx"],"names":["useQuery","Grid","makeStyles","React","useEffect","GetLearningData","_t_","LearningBarGraph","dates","LearningContainer","activeQuarter","activeProductId","useStyles","graphDiv","height","padding","activeProd","setActiveProd","useState","data","refetch","variables","learningInput","startDate","undefined","endDate","productId","learningData","getLearningData","classes","width","learningParticipation","learnerAssessments","learnerSatisfaction"],"mappings":"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","sourcesContent":["import { QueryResult, useQuery } from '@apollo/client';\nimport { Grid, makeStyles } from '@material-ui/core';\nimport React, { useEffect } from 'react';\nimport { GetLearningData } from '../../../gql/queries/learning';\nimport {\n  getLearningData,\n  getLearningData_getLearningData,\n} from '../../../gql/types';\nimport { _t_ } from '../../../utils/translation/translation';\nimport LearningBarGraph from '../../molecules/LearningBarGraph';\nimport { dates } from '../ManagerDashboard';\n\nexport interface LearningContainerProps {\n  activeQuarter?: number;\n  activeProductId?: string;\n}\n\nconst LearningContainer: React.FC<LearningContainerProps> = ({\n  activeQuarter,\n  activeProductId,\n}: LearningContainerProps) => {\n  const useStyles = makeStyles({\n    graphDiv: {\n      height: '100%',\n      padding: '4% 3.8%',\n    },\n  });\n\n  const [activeProd, setActiveProd] = React.useState(activeProductId);\n\n  useEffect(() => {\n    setActiveProd(activeProductId);\n  }, [activeProductId]);\n\n  const { data, refetch }: QueryResult<getLearningData> = useQuery(\n    GetLearningData,\n    {\n      variables: {\n        learningInput: {\n          startDate:\n            activeQuarter !== undefined ? dates[activeQuarter].startDate : '',\n          endDate:\n            activeQuarter !== undefined ? dates[activeQuarter].endDate : '',\n          productId: activeProductId === '' ? null : activeProductId,\n        },\n      },\n    },\n  );\n\n  useEffect(() => {\n    void refetch();\n  }, [activeQuarter, refetch, activeProd]);\n\n  // eslint-disable-next-line camelcase\n  const learningData: getLearningData_getLearningData | null | undefined =\n    data?.getLearningData;\n\n  const classes = useStyles();\n  return (\n    <>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n        style={{ width: '100%', height: 363 }}\n      >\n        <Grid item xs={4} className={classes.graphDiv}>\n          <LearningBarGraph\n            title={_t_('Learning Module Participation')}\n            data={learningData?.learningParticipation}\n          />\n        </Grid>\n        <Grid item xs={4} className={classes.graphDiv}>\n          <LearningBarGraph\n            title={_t_('Learner Assessment')}\n            data={learningData?.learnerAssessments}\n          />\n        </Grid>\n        <Grid item xs={4} className={classes.graphDiv}>\n          {' '}\n          <LearningBarGraph\n            title={_t_('Learner Satisfaction')}\n            data={learningData?.learnerSatisfaction}\n          />\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default LearningContainer;\n"]},"metadata":{},"sourceType":"module"}