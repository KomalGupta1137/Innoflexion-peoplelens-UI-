{"ast":null,"code":"import e from \"void-elements\";\nvar t = /\\s([^'\"/\\s><]+?)[\\s/>]|([^\\s=]+)=\\s?(\".*?\"|'.*?')/g;\n\nfunction n(n) {\n  var r = {\n    type: \"tag\",\n    name: \"\",\n    voidElement: !1,\n    attrs: {},\n    children: []\n  },\n      i = n.match(/<\\/?([^\\s]+?)[/\\s>]/);\n\n  if (i && (r.name = i[1], (e[i[1].toLowerCase()] || \"/\" === n.charAt(n.length - 2)) && (r.voidElement = !0), r.name.startsWith(\"!--\"))) {\n    var s = n.indexOf(\"--\\x3e\");\n    return {\n      type: \"comment\",\n      comment: -1 !== s ? n.slice(4, s) : \"\"\n    };\n  }\n\n  for (var a = new RegExp(t), c = null; null !== (c = a.exec(n));) if (c[0].trim()) if (c[1]) {\n    var o = c[1].trim(),\n        l = [o, \"\"];\n    o.indexOf(\"=\") > -1 && (l = o.split(\"=\")), r.attrs[l[0]] = l[1], a.lastIndex--;\n  } else c[2] && (r.attrs[c[2]] = c[3].trim().substring(1, c[3].length - 1));\n\n  return r;\n}\n\nvar r = /<[a-zA-Z0-9\\-\\!\\/](?:\"[^\"]*\"|'[^']*'|[^'\">])*>/g,\n    i = /^\\s*$/,\n    s = Object.create(null);\n\nfunction a(e, t) {\n  switch (t.type) {\n    case \"text\":\n      return e + t.content;\n\n    case \"tag\":\n      return e += \"<\" + t.name + (t.attrs ? function (e) {\n        var t = [];\n\n        for (var n in e) t.push(n + '=\"' + e[n] + '\"');\n\n        return t.length ? \" \" + t.join(\" \") : \"\";\n      }(t.attrs) : \"\") + (t.voidElement ? \"/>\" : \">\"), t.voidElement ? e : e + t.children.reduce(a, \"\") + \"</\" + t.name + \">\";\n\n    case \"comment\":\n      return e + \"\\x3c!--\" + t.comment + \"--\\x3e\";\n  }\n}\n\nvar c = {\n  parse: function (e, t) {\n    t || (t = {}), t.components || (t.components = s);\n    var a,\n        c = [],\n        o = [],\n        l = -1,\n        m = !1;\n\n    if (0 !== e.indexOf(\"<\")) {\n      var u = e.indexOf(\"<\");\n      c.push({\n        type: \"text\",\n        content: -1 === u ? e : e.substring(0, u)\n      });\n    }\n\n    return e.replace(r, function (r, s) {\n      if (m) {\n        if (r !== \"</\" + a.name + \">\") return;\n        m = !1;\n      }\n\n      var u,\n          f = \"/\" !== r.charAt(1),\n          h = r.startsWith(\"\\x3c!--\"),\n          p = s + r.length,\n          d = e.charAt(p);\n\n      if (h) {\n        var v = n(r);\n        return l < 0 ? (c.push(v), c) : ((u = o[l]).children.push(v), c);\n      }\n\n      if (f && (l++, \"tag\" === (a = n(r)).type && t.components[a.name] && (a.type = \"component\", m = !0), a.voidElement || m || !d || \"<\" === d || a.children.push({\n        type: \"text\",\n        content: e.slice(p, e.indexOf(\"<\", p))\n      }), 0 === l && c.push(a), (u = o[l - 1]) && u.children.push(a), o[l] = a), (!f || a.voidElement) && (l > -1 && (a.voidElement || a.name === r.slice(2, -1)) && (l--, a = -1 === l ? c : o[l]), !m && \"<\" !== d && d)) {\n        u = -1 === l ? c : o[l].children;\n        var x = e.indexOf(\"<\", p),\n            g = e.slice(p, -1 === x ? void 0 : x);\n        i.test(g) && (g = \" \"), (x > -1 && l + u.length >= 0 || \" \" !== g) && u.push({\n          type: \"text\",\n          content: g\n        });\n      }\n    }), c;\n  },\n  stringify: function (e) {\n    return e.reduce(function (e, t) {\n      return e + a(\"\", t);\n    }, \"\");\n  }\n};\nexport default c;","map":{"version":3,"sources":["../src/parse-tag.js","../src/parse.js","../src/stringify.js","../src/index.js"],"names":["attrRE","stringify","tag","res","type","name","voidElement","attrs","children","tagMatch","match","lookup","toLowerCase","charAt","length","startsWith","endIndex","indexOf","comment","slice","reg","RegExp","result","exec","trim","attr","arr","split","lastIndex","substring","tagRE","whitespaceRE","empty","Object","create","html","options","components","current","level","inComponent","end","push","content","replace","index","isOpen","isComment","start","nextChar","parent","parseTag","undefined","test","buff","key","join","doc","attrString","reduce","token","rootEl","parse"],"mappings":"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","sourcesContent":["import lookup from 'void-elements'\nconst attrRE = /\\s([^'\"/\\s><]+?)[\\s/>]|([^\\s=]+)=\\s?(\".*?\"|'.*?')/g\n\nexport default function stringify(tag) {\n  const res = {\n    type: 'tag',\n    name: '',\n    voidElement: false,\n    attrs: {},\n    children: [],\n  }\n\n  const tagMatch = tag.match(/<\\/?([^\\s]+?)[/\\s>]/)\n  if (tagMatch) {\n    res.name = tagMatch[1]\n    if (\n      lookup[tagMatch[1].toLowerCase()] ||\n      tag.charAt(tag.length - 2) === '/'\n    ) {\n      res.voidElement = true\n    }\n\n    // handle comment tag\n    if (res.name.startsWith('!--')) {\n      const endIndex = tag.indexOf('-->')\n      return {\n        type: 'comment',\n        comment: endIndex !== -1 ? tag.slice(4, endIndex) : '',\n      }\n    }\n  }\n\n  const reg = new RegExp(attrRE)\n  let result = null\n  for (;;) {\n    result = reg.exec(tag)\n\n    if (result === null) {\n      break\n    }\n\n    if (!result[0].trim()) {\n      continue\n    }\n\n    if (result[1]) {\n      const attr = result[1].trim()\n      let arr = [attr, '']\n\n      if (attr.indexOf('=') > -1) {\n        arr = attr.split('=')\n      }\n\n      res.attrs[arr[0]] = arr[1]\n      reg.lastIndex--\n    } else if (result[2]) {\n      res.attrs[result[2]] = result[3].trim().substring(1, result[3].length - 1)\n    }\n  }\n\n  return res\n}\n","import parseTag from './parse-tag'\n\nconst tagRE = /<[a-zA-Z0-9\\-\\!\\/](?:\"[^\"]*\"|'[^']*'|[^'\">])*>/g\nconst whitespaceRE = /^\\s*$/\n\n// re-used obj for quick lookups of components\nconst empty = Object.create(null)\n\nexport default function parse(html, options) {\n  options || (options = {})\n  options.components || (options.components = empty)\n  const result = []\n  const arr = []\n  let current\n  let level = -1\n  let inComponent = false\n\n  // handle text at top level\n  if (html.indexOf('<') !== 0) {\n    var end = html.indexOf('<')\n    result.push({\n      type: 'text',\n      content: end === -1 ? html : html.substring(0, end),\n    })\n  }\n\n  html.replace(tagRE, function (tag, index) {\n    if (inComponent) {\n      if (tag !== '</' + current.name + '>') {\n        return\n      } else {\n        inComponent = false\n      }\n    }\n    const isOpen = tag.charAt(1) !== '/'\n    const isComment = tag.startsWith('<!--')\n    const start = index + tag.length\n    const nextChar = html.charAt(start)\n    let parent\n\n    if (isComment) {\n      const comment = parseTag(tag)\n\n      // if we're at root, push new base node\n      if (level < 0) {\n        result.push(comment)\n        return result\n      }\n      parent = arr[level]\n      parent.children.push(comment)\n      return result\n    }\n\n    if (isOpen) {\n      level++\n\n      current = parseTag(tag)\n      if (current.type === 'tag' && options.components[current.name]) {\n        current.type = 'component'\n        inComponent = true\n      }\n\n      if (\n        !current.voidElement &&\n        !inComponent &&\n        nextChar &&\n        nextChar !== '<'\n      ) {\n        current.children.push({\n          type: 'text',\n          content: html.slice(start, html.indexOf('<', start)),\n        })\n      }\n\n      // if we're at root, push new base node\n      if (level === 0) {\n        result.push(current)\n      }\n\n      parent = arr[level - 1]\n\n      if (parent) {\n        parent.children.push(current)\n      }\n\n      arr[level] = current\n    }\n\n    if (!isOpen || current.voidElement) {\n      if (\n        level > -1 &&\n        (current.voidElement || current.name === tag.slice(2, -1))\n      ) {\n        level--\n        // move current up a level to match the end tag\n        current = level === -1 ? result : arr[level]\n      }\n      if (!inComponent && nextChar !== '<' && nextChar) {\n        // trailing text node\n        // if we're at the root, push a base text node. otherwise add as\n        // a child to the current node.\n        parent = level === -1 ? result : arr[level].children\n\n        // calculate correct end of the content slice in case there's\n        // no tag after the text node.\n        const end = html.indexOf('<', start)\n        let content = html.slice(start, end === -1 ? undefined : end)\n        // if a node is nothing but whitespace, collapse it as the spec states:\n        // https://www.w3.org/TR/html4/struct/text.html#h-9.1\n        if (whitespaceRE.test(content)) {\n          content = ' '\n        }\n        // don't add whitespace-only text nodes if they would be trailing text nodes\n        // or if they would be leading whitespace-only text nodes:\n        //  * end > -1 indicates this is not a trailing text node\n        //  * leading node is when level is -1 and parent has length 0\n        if ((end > -1 && level + parent.length >= 0) || content !== ' ') {\n          parent.push({\n            type: 'text',\n            content: content,\n          })\n        }\n      }\n    }\n  })\n\n  return result\n}\n","function attrString(attrs) {\n  const buff = []\n  for (let key in attrs) {\n    buff.push(key + '=\"' + attrs[key] + '\"')\n  }\n  if (!buff.length) {\n    return ''\n  }\n  return ' ' + buff.join(' ')\n}\n\nfunction stringify(buff, doc) {\n  switch (doc.type) {\n    case 'text':\n      return buff + doc.content\n    case 'tag':\n      buff +=\n        '<' +\n        doc.name +\n        (doc.attrs ? attrString(doc.attrs) : '') +\n        (doc.voidElement ? '/>' : '>')\n      if (doc.voidElement) {\n        return buff\n      }\n      return buff + doc.children.reduce(stringify, '') + '</' + doc.name + '>'\n    case 'comment':\n      buff += '<!--' + doc.comment + '-->'\n      return buff\n  }\n}\n\nexport default function (doc) {\n  return doc.reduce(function (token, rootEl) {\n    return token + stringify('', rootEl)\n  }, '')\n}\n","import parse from './parse'\nimport stringify from './stringify'\n\nexport default {\n  parse,\n  stringify,\n}\n"]},"metadata":{},"sourceType":"module"}