{"ast":null,"code":"import classnames from 'classnames';\nimport React from 'react';\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport PropTypes from 'prop-types';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar styles = {\n  \"label\": \"_4GdcU\",\n  \"textareaView\": \"_G0k44\",\n  \"shared\": \"_i5--j\",\n  \"placeholder\": \"_TDklp\",\n  \"inline\": \"_gmkRL\",\n  \"readonly\": \"_-wzeg\",\n  \"displayContainer\": \"_IYz6Z\",\n  \"editButton\": \"_NGZSv\"\n};\nvar _excluded$1 = [\"props\", \"inputRef\", \"handleBlur\", \"handleKeydown\", \"handleFocus\", \"inputClassName\"];\n\nvar Input = function Input(_ref) {\n  var _classnames;\n\n  var _ref$props = _ref.props,\n      id = _ref$props.id,\n      inline = _ref$props.inline,\n      style = _ref$props.style,\n      type = _ref$props.type,\n      name = _ref$props.name,\n      inputRef = _ref.inputRef,\n      handleBlur = _ref.handleBlur,\n      handleKeydown = _ref.handleKeydown,\n      handleFocus = _ref.handleFocus,\n      inputClassName = _ref.inputClassName,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded$1);\n\n  return /*#__PURE__*/jsx(\"input\", _extends({\n    id: id,\n    className: classnames(styles.shared, inputClassName, (_classnames = {}, _classnames[styles.inline] = inline, _classnames)),\n    style: style,\n    ref: inputRef,\n    type: type,\n    name: name,\n    onBlur: handleBlur,\n    onKeyDown: handleKeydown,\n    autoFocus: true,\n    onFocus: handleFocus\n  }, rest));\n};\n\nvar EditIcon = function EditIcon() {\n  return /*#__PURE__*/jsx(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 512 512\",\n    children: /*#__PURE__*/jsx(\"path\", {\n      d: \"M421.7 220.3L188.5 453.4L154.6 419.5L158.1 416H112C103.2 416 96 408.8 96 400V353.9L92.51 357.4C87.78 362.2 84.31 368 82.42 374.4L59.44 452.6L137.6 429.6C143.1 427.7 149.8 424.2 154.6 419.5L188.5 453.4C178.1 463.8 165.2 471.5 151.1 475.6L30.77 511C22.35 513.5 13.24 511.2 7.03 504.1C.8198 498.8-1.502 489.7 .976 481.2L36.37 360.9C40.53 346.8 48.16 333.9 58.57 323.5L291.7 90.34L421.7 220.3zM492.7 58.75C517.7 83.74 517.7 124.3 492.7 149.3L444.3 197.7L314.3 67.72L362.7 19.32C387.7-5.678 428.3-5.678 453.3 19.32L492.7 58.75z\"\n    })\n  });\n};\n\nvar sharedDefaultProps = {\n  id: undefined,\n  name: undefined,\n  className: undefined,\n  value: undefined,\n  formatDisplayText: function formatDisplayText(x) {\n    return x;\n  },\n  defaultValue: undefined,\n  placeholder: '',\n  onSave: function onSave() {},\n  onChange: function onChange() {},\n  onEditMode: function onEditMode() {},\n  onBlur: function onBlur() {},\n  style: {},\n  readonly: false,\n  inputClassName: undefined\n};\nvar sharedPropTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  className: PropTypes.string,\n  value: PropTypes.string,\n  formatDisplayText: PropTypes.func,\n  defaultValue: PropTypes.string,\n  placeholder: PropTypes.string,\n  onSave: PropTypes.func,\n  onChange: PropTypes.func,\n  onEditMode: PropTypes.func,\n  onBlur: PropTypes.func,\n  style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  readonly: PropTypes.bool,\n  inputClassName: PropTypes.string\n};\n\nvar EditTextPropTypes = _extends({}, sharedPropTypes, {\n  type: PropTypes.string,\n  inline: PropTypes.bool,\n  showEditButton: PropTypes.bool,\n  editButtonContent: PropTypes.any,\n  editButtonProps: PropTypes.object\n});\n\nvar EditTextDefaultProps = _extends({}, sharedDefaultProps, {\n  type: 'text',\n  inline: false,\n  showEditButton: false,\n  editButtonContent: /*#__PURE__*/jsx(EditIcon, {}),\n  editButtonProps: {}\n});\n\nvar EditTextareaPropTypes = _extends({}, sharedPropTypes, {\n  rows: PropTypes.number\n});\n\nvar EditTextareaDefaultProps = _extends({}, sharedDefaultProps, {\n  rows: 3\n});\n\nfunction EditText(_ref) {\n  var id = _ref.id,\n      name = _ref.name,\n      className = _ref.className,\n      placeholder = _ref.placeholder,\n      inline = _ref.inline,\n      style = _ref.style,\n      readonly = _ref.readonly,\n      type = _ref.type,\n      value = _ref.value,\n      defaultValue = _ref.defaultValue,\n      formatDisplayText = _ref.formatDisplayText,\n      onEditMode = _ref.onEditMode,\n      _onChange = _ref.onChange,\n      onSave = _ref.onSave,\n      onBlur = _ref.onBlur,\n      showEditButton = _ref.showEditButton,\n      editButtonContent = _ref.editButtonContent,\n      editButtonProps = _ref.editButtonProps,\n      inputClassName = _ref.inputClassName;\n  var inputRef = React.useRef(null);\n\n  var _React$useState = React.useState({}),\n      changeEvent = _React$useState[0],\n      setChangeEvent = _React$useState[1];\n\n  var _React$useState2 = React.useState(''),\n      previousValue = _React$useState2[0],\n      setPreviousValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      savedText = _React$useState3[0],\n      setSavedText = _React$useState3[1];\n\n  var _React$useState4 = React.useState(false),\n      editMode = _React$useState4[0],\n      setEditMode = _React$useState4[1];\n\n  React.useEffect(function () {\n    if (defaultValue !== undefined) {\n      setPreviousValue(defaultValue);\n      setSavedText(defaultValue);\n    }\n  }, [defaultValue]);\n  React.useEffect(function () {\n    if (value !== undefined) {\n      setSavedText(value);\n\n      if (!editMode) {\n        setPreviousValue(value);\n      }\n    }\n  }, [value, editMode]);\n\n  var handleClickDisplay = function handleClickDisplay() {\n    if (readonly || showEditButton) return;\n    setEditMode(true);\n    onEditMode();\n  };\n\n  var handleClickEditButton = function handleClickEditButton() {\n    setEditMode(true);\n    onEditMode();\n  };\n\n  var handleBlur = function handleBlur(save) {\n    if (save === void 0) {\n      save = true;\n    }\n\n    if (inputRef.current) {\n      var _inputRef$current = inputRef.current,\n          inputName = _inputRef$current.name,\n          inputValue = _inputRef$current.value;\n\n      if (save && previousValue !== inputValue) {\n        onSave({\n          name: inputName,\n          value: inputValue,\n          previousValue: previousValue\n        });\n        setSavedText(inputValue);\n        setPreviousValue(inputValue);\n      } else if (!save) {\n        _onChange(_extends({}, changeEvent, {\n          target: changeEvent.target ? _extends({}, changeEvent.target, {\n            value: previousValue\n          }) : {\n            value: previousValue\n          }\n        }));\n      }\n\n      setEditMode(false);\n      onBlur();\n    }\n  };\n\n  var handleKeydown = function handleKeydown(e) {\n    if (e.keyCode === 13 || e.charCode === 13) {\n      handleBlur();\n    } else if (e.keyCode === 27 || e.charCode === 27) {\n      handleBlur(false);\n    }\n  };\n\n  var handleFocus = function handleFocus(e) {\n    if (type === 'text') {\n      e.currentTarget.setSelectionRange(e.currentTarget.value.length, e.currentTarget.value.length);\n    }\n  };\n\n  var renderDisplayMode = function renderDisplayMode() {\n    var _classnames, _classnames2;\n\n    return /*#__PURE__*/jsxs(\"div\", {\n      className: classnames(styles.displayContainer, (_classnames = {}, _classnames[styles.inline] = inline, _classnames)),\n      children: [/*#__PURE__*/jsx(\"div\", {\n        id: id,\n        className: classnames(styles.label, styles.shared, (_classnames2 = {}, _classnames2[styles.placeholder] = placeholder && !savedText, _classnames2[styles.inline] = inline, _classnames2[styles.readonly] = readonly || showEditButton, _classnames2), className),\n        onClick: handleClickDisplay,\n        style: style,\n        \"aria-label\": \"display component\",\n        children: formatDisplayText(savedText) || placeholder\n      }), showEditButton && !readonly && /*#__PURE__*/jsx(\"button\", _extends({\n        type: \"button\",\n        className: styles.editButton\n      }, editButtonProps, {\n        onClick: handleClickEditButton,\n        children: editButtonContent\n      }))]\n    });\n  };\n\n  var renderEditMode = function renderEditMode(controlled) {\n    var _sharedProps;\n\n    var sharedProps = (_sharedProps = {\n      inputRef: inputRef,\n      handleBlur: handleBlur,\n      handleKeydown: handleKeydown,\n      handleFocus: handleFocus,\n      props: {\n        id: id,\n        inline: inline,\n        style: style,\n        type: type,\n        name: name\n      }\n    }, _sharedProps['aria-label'] = 'input component', _sharedProps);\n    return controlled ? /*#__PURE__*/jsx(Input, _extends({}, sharedProps, {\n      value: value,\n      onChange: function onChange(e) {\n        setChangeEvent(e);\n\n        _onChange(e);\n      },\n      inputClassName: inputClassName\n    })) : /*#__PURE__*/jsx(Input, _extends({}, sharedProps, {\n      defaultValue: savedText,\n      inputClassName: inputClassName\n    }));\n  };\n\n  return !readonly && editMode ? renderEditMode(value !== undefined && _onChange !== undefined) : renderDisplayMode();\n}\n\nEditText.defaultProps = EditTextDefaultProps;\nEditText.propTypes = EditTextPropTypes;\nvar _excluded = [\"props\", \"inputRef\", \"handleBlur\", \"handleKeydown\", \"inputClassName\"];\n\nvar Textarea = function Textarea(_ref) {\n  var _ref$props = _ref.props,\n      id = _ref$props.id,\n      rows = _ref$props.rows,\n      style = _ref$props.style,\n      name = _ref$props.name,\n      inputRef = _ref.inputRef,\n      handleBlur = _ref.handleBlur,\n      handleKeydown = _ref.handleKeydown,\n      inputClassName = _ref.inputClassName,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  return /*#__PURE__*/jsx(\"textarea\", _extends({\n    id: id,\n    className: classnames(styles.shared, inputClassName),\n    style: style,\n    ref: inputRef,\n    rows: rows,\n    name: name,\n    onBlur: handleBlur,\n    onKeyDown: handleKeydown,\n    autoFocus: true,\n    onFocus: function onFocus(e) {\n      return e.currentTarget.setSelectionRange(e.currentTarget.value.length, e.currentTarget.value.length);\n    }\n  }, rest));\n};\n\nvar splitLines = function splitLines(val) {\n  return val ? val.split(/\\r?\\n/) : [];\n};\n\nfunction EditTextarea(_ref) {\n  var id = _ref.id,\n      rows = _ref.rows,\n      name = _ref.name,\n      className = _ref.className,\n      placeholder = _ref.placeholder,\n      style = _ref.style,\n      readonly = _ref.readonly,\n      value = _ref.value,\n      defaultValue = _ref.defaultValue,\n      formatDisplayText = _ref.formatDisplayText,\n      onEditMode = _ref.onEditMode,\n      _onChange = _ref.onChange,\n      onSave = _ref.onSave,\n      onBlur = _ref.onBlur,\n      inputClassName = _ref.inputClassName;\n  var inputRef = React.useRef(null);\n\n  var _React$useState = React.useState({}),\n      changeEvent = _React$useState[0],\n      setChangeEvent = _React$useState[1];\n\n  var _React$useState2 = React.useState(''),\n      previousValue = _React$useState2[0],\n      setPreviousValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      savedText = _React$useState3[0],\n      setSavedText = _React$useState3[1];\n\n  var _React$useState4 = React.useState(false),\n      editMode = _React$useState4[0],\n      setEditMode = _React$useState4[1];\n\n  React.useEffect(function () {\n    if (defaultValue !== undefined) {\n      setPreviousValue(defaultValue);\n      setSavedText(defaultValue);\n    }\n  }, [defaultValue]);\n  React.useEffect(function () {\n    if (value !== undefined) {\n      setSavedText(value);\n\n      if (!editMode) {\n        setPreviousValue(value);\n      }\n    }\n  }, [value, editMode]);\n\n  var handleClick = function handleClick() {\n    if (readonly) return;\n    setEditMode(true);\n    onEditMode();\n  };\n\n  var handleBlur = function handleBlur(save) {\n    if (save === void 0) {\n      save = true;\n    }\n\n    if (inputRef.current) {\n      var _inputRef$current = inputRef.current,\n          inputName = _inputRef$current.name,\n          inputValue = _inputRef$current.value;\n\n      if (save && previousValue !== inputValue) {\n        onSave({\n          name: inputName,\n          value: inputValue,\n          previousValue: previousValue\n        });\n        setSavedText(inputValue);\n        setPreviousValue(inputValue);\n      } else if (!save) {\n        _onChange(_extends({}, changeEvent, {\n          target: changeEvent.target ? _extends({}, changeEvent.target, {\n            value: previousValue\n          }) : {\n            value: previousValue\n          }\n        }));\n      }\n\n      setEditMode(false);\n      onBlur();\n    }\n  };\n\n  var handleKeydown = function handleKeydown(e) {\n    if (e.keyCode === 27 || e.charCode === 27) {\n      handleBlur(false);\n    }\n  };\n\n  var renderDisplayMode = function renderDisplayMode() {\n    var _classnames;\n\n    var textLines = splitLines(formatDisplayText(savedText));\n    return /*#__PURE__*/jsx(\"div\", {\n      id: id,\n      className: classnames(styles.shared, styles.textareaView, (_classnames = {}, _classnames[styles.placeholder] = placeholder && !savedText, _classnames[styles.readonly] = readonly, _classnames), className),\n      onClick: handleClick,\n      style: _extends({}, style, {\n        height: rows * 24 + 16 + \"px\"\n      }),\n      \"aria-label\": \"display component\",\n      children: textLines.length > 0 ? textLines.map(function (text, index) {\n        return /*#__PURE__*/jsxs(React.Fragment, {\n          children: [/*#__PURE__*/jsx(\"span\", {\n            children: text\n          }), /*#__PURE__*/jsx(\"br\", {})]\n        }, index);\n      }) : /*#__PURE__*/jsx(\"span\", {\n        children: placeholder\n      })\n    });\n  };\n\n  var renderEditMode = function renderEditMode(controlled) {\n    var _sharedProps;\n\n    var sharedProps = (_sharedProps = {\n      inputRef: inputRef,\n      handleBlur: handleBlur,\n      handleKeydown: handleKeydown,\n      props: {\n        id: id,\n        rows: rows,\n        style: style,\n        name: name\n      }\n    }, _sharedProps['aria-label'] = 'textarea component', _sharedProps);\n    return controlled ? /*#__PURE__*/jsx(Textarea, _extends({}, sharedProps, {\n      value: value,\n      onChange: function onChange(e) {\n        setChangeEvent(e);\n\n        _onChange(e);\n      },\n      inputClassName: inputClassName\n    })) : /*#__PURE__*/jsx(Textarea, _extends({}, sharedProps, {\n      defaultValue: savedText,\n      inputClassName: inputClassName\n    }));\n  };\n\n  return !readonly && editMode ? renderEditMode(value !== undefined && _onChange !== undefined) : renderDisplayMode();\n}\n\nEditTextarea.defaultProps = EditTextareaDefaultProps;\nEditTextarea.propTypes = EditTextareaPropTypes;\nexport { EditText, EditTextarea };","map":{"version":3,"sources":["../src/components/Input.js","../src/components/EditIcon.js","../src/propTypes.js","../src/EditText.js","../src/components/Textarea.js","../src/EditTextarea.js"],"names":["Input","props","id","inline","style","type","name","inputRef","handleBlur","handleKeydown","handleFocus","inputClassName","rest","classnames","styles","EditIcon","sharedDefaultProps","className","value","formatDisplayText","defaultValue","placeholder","onSave","onChange","onEditMode","onBlur","readonly","undefined","sharedPropTypes","PropTypes","string","EditTextPropTypes","showEditButton","editButtonContent","editButtonProps","object","EditTextDefaultProps","_jsx","EditTextareaPropTypes","rows","number","EditTextareaDefaultProps","React","changeEvent","setChangeEvent","previousValue","setPreviousValue","savedText","setSavedText","editMode","setEditMode","handleClickDisplay","handleClickEditButton","save","inputName","inputValue","target","e","renderDisplayMode","editButton","renderEditMode","sharedProps","controlled","EditText","Textarea","splitLines","val","handleClick","textLines","height","text","EditTextarea"],"mappings":"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","sourcesContent":["import classnames from 'classnames';\nimport React from 'react';\nimport styles from '../styles.module.css';\n\nconst Input = ({\n  props: { id, inline, style, type, name },\n  inputRef,\n  handleBlur,\n  handleKeydown,\n  handleFocus,\n  inputClassName,\n  ...rest\n}) => {\n  return (\n    <input\n      id={id}\n      className={classnames(styles.shared, inputClassName, {\n        [styles.inline]: inline\n      })}\n      style={style}\n      ref={inputRef}\n      type={type}\n      name={name}\n      onBlur={handleBlur}\n      onKeyDown={handleKeydown}\n      autoFocus\n      onFocus={handleFocus}\n      {...rest}\n    />\n  );\n};\n\nexport default Input;\n","import React from 'react';\n\nconst EditIcon = () => {\n  return (\n    <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'>\n      <path d='M421.7 220.3L188.5 453.4L154.6 419.5L158.1 416H112C103.2 416 96 408.8 96 400V353.9L92.51 357.4C87.78 362.2 84.31 368 82.42 374.4L59.44 452.6L137.6 429.6C143.1 427.7 149.8 424.2 154.6 419.5L188.5 453.4C178.1 463.8 165.2 471.5 151.1 475.6L30.77 511C22.35 513.5 13.24 511.2 7.03 504.1C.8198 498.8-1.502 489.7 .976 481.2L36.37 360.9C40.53 346.8 48.16 333.9 58.57 323.5L291.7 90.34L421.7 220.3zM492.7 58.75C517.7 83.74 517.7 124.3 492.7 149.3L444.3 197.7L314.3 67.72L362.7 19.32C387.7-5.678 428.3-5.678 453.3 19.32L492.7 58.75z' />\n    </svg>\n  );\n};\n\nexport default EditIcon;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport EditIcon from './components/EditIcon';\n\nconst sharedDefaultProps = {\n  id: undefined,\n  name: undefined,\n  className: undefined,\n  value: undefined,\n  formatDisplayText: (x) => x,\n  defaultValue: undefined,\n  placeholder: '',\n  onSave: () => {},\n  onChange: () => {},\n  onEditMode: () => {},\n  onBlur: () => {},\n  style: {},\n  readonly: false,\n  inputClassName: undefined\n};\n\nconst sharedPropTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  className: PropTypes.string,\n  value: PropTypes.string,\n  formatDisplayText: PropTypes.func,\n  defaultValue: PropTypes.string,\n  placeholder: PropTypes.string,\n  onSave: PropTypes.func,\n  onChange: PropTypes.func,\n  onEditMode: PropTypes.func,\n  onBlur: PropTypes.func,\n  style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  readonly: PropTypes.bool,\n  inputClassName: PropTypes.string\n};\n\nexport const EditTextPropTypes = {\n  ...sharedPropTypes,\n  type: PropTypes.string,\n  inline: PropTypes.bool,\n  showEditButton: PropTypes.bool,\n  editButtonContent: PropTypes.any,\n  editButtonProps: PropTypes.object\n};\n\nexport const EditTextDefaultProps = {\n  ...sharedDefaultProps,\n  type: 'text',\n  inline: false,\n  showEditButton: false,\n  editButtonContent: <EditIcon />,\n  editButtonProps: {}\n};\n\nexport const EditTextareaPropTypes = {\n  ...sharedPropTypes,\n  rows: PropTypes.number\n};\n\nexport const EditTextareaDefaultProps = {\n  ...sharedDefaultProps,\n  rows: 3\n};\n","import classnames from 'classnames';\nimport React from 'react';\nimport Input from './components/Input';\nimport { EditTextDefaultProps, EditTextPropTypes } from './propTypes';\nimport styles from './styles.module.css';\n\nexport default function EditText({\n  id,\n  name,\n  className,\n  placeholder,\n  inline,\n  style,\n  readonly,\n  type,\n  value,\n  defaultValue,\n  formatDisplayText,\n  onEditMode,\n  onChange,\n  onSave,\n  onBlur,\n  showEditButton,\n  editButtonContent,\n  editButtonProps,\n  inputClassName\n}) {\n  const inputRef = React.useRef(null);\n  const [changeEvent, setChangeEvent] = React.useState({});\n  const [previousValue, setPreviousValue] = React.useState('');\n  const [savedText, setSavedText] = React.useState('');\n  const [editMode, setEditMode] = React.useState(false);\n\n  React.useEffect(() => {\n    if (defaultValue !== undefined) {\n      setPreviousValue(defaultValue);\n      setSavedText(defaultValue);\n    }\n  }, [defaultValue]);\n\n  React.useEffect(() => {\n    if (value !== undefined) {\n      setSavedText(value);\n      if (!editMode) {\n        setPreviousValue(value);\n      }\n    }\n  }, [value, editMode]);\n\n  const handleClickDisplay = () => {\n    if (readonly || showEditButton) return;\n    setEditMode(true);\n    onEditMode();\n  };\n\n  const handleClickEditButton = () => {\n    setEditMode(true);\n    onEditMode();\n  };\n\n  const handleBlur = (save = true) => {\n    if (inputRef.current) {\n      const { name: inputName, value: inputValue } = inputRef.current;\n      if (save && previousValue !== inputValue) {\n        onSave({\n          name: inputName,\n          value: inputValue,\n          previousValue: previousValue\n        });\n        setSavedText(inputValue);\n        setPreviousValue(inputValue);\n      } else if (!save) {\n        onChange({\n          ...changeEvent,\n          target: changeEvent.target\n            ? { ...changeEvent.target, value: previousValue }\n            : { value: previousValue }\n        });\n      }\n      setEditMode(false);\n      onBlur();\n    }\n  };\n\n  const handleKeydown = (e) => {\n    if (e.keyCode === 13 || e.charCode === 13) {\n      handleBlur();\n    } else if (e.keyCode === 27 || e.charCode === 27) {\n      handleBlur(false);\n    }\n  };\n\n  const handleFocus = (e) => {\n    if (type === 'text') {\n      e.currentTarget.setSelectionRange(\n        e.currentTarget.value.length,\n        e.currentTarget.value.length\n      );\n    }\n  };\n\n  const renderDisplayMode = () => {\n    return (\n      <div\n        className={classnames(styles.displayContainer, {\n          [styles.inline]: inline\n        })}\n      >\n        <div\n          id={id}\n          className={classnames(\n            styles.label,\n            styles.shared,\n            {\n              [styles.placeholder]: placeholder && !savedText,\n              [styles.inline]: inline,\n              [styles.readonly]: readonly || showEditButton\n            },\n            className\n          )}\n          onClick={handleClickDisplay}\n          style={style}\n          aria-label='display component'\n        >\n          {formatDisplayText(savedText) || placeholder}\n        </div>\n        {showEditButton && !readonly && (\n          <button\n            type='button'\n            className={styles.editButton}\n            {...editButtonProps}\n            onClick={handleClickEditButton}\n          >\n            {editButtonContent}\n          </button>\n        )}\n      </div>\n    );\n  };\n\n  const renderEditMode = (controlled) => {\n    const sharedProps = {\n      inputRef: inputRef,\n      handleBlur: handleBlur,\n      handleKeydown: handleKeydown,\n      handleFocus: handleFocus,\n      props: { id, inline, style, type, name },\n      ['aria-label']: 'input component'\n    };\n    return controlled ? (\n      <Input\n        {...sharedProps}\n        value={value}\n        onChange={(e) => {\n          setChangeEvent(e);\n          onChange(e);\n        }}\n        inputClassName={inputClassName}\n      />\n    ) : (\n      <Input\n        {...sharedProps}\n        defaultValue={savedText}\n        inputClassName={inputClassName}\n      />\n    );\n  };\n\n  return !readonly && editMode\n    ? renderEditMode(value !== undefined && onChange !== undefined)\n    : renderDisplayMode();\n}\n\nEditText.defaultProps = EditTextDefaultProps;\nEditText.propTypes = EditTextPropTypes;\n","import classnames from 'classnames';\nimport React from 'react';\nimport styles from '../styles.module.css';\n\nconst Textarea = ({\n  props: { id, rows, style, name },\n  inputRef,\n  handleBlur,\n  handleKeydown,\n  inputClassName,\n  ...rest\n}) => {\n  return (\n    <textarea\n      id={id}\n      className={classnames(styles.shared, inputClassName)}\n      style={style}\n      ref={inputRef}\n      rows={rows}\n      name={name}\n      onBlur={handleBlur}\n      onKeyDown={handleKeydown}\n      autoFocus\n      onFocus={(e) =>\n        e.currentTarget.setSelectionRange(\n          e.currentTarget.value.length,\n          e.currentTarget.value.length\n        )\n      }\n      {...rest}\n    />\n  );\n};\n\nexport default Textarea;\n","import classnames from 'classnames';\nimport React from 'react';\nimport Textarea from './components/Textarea';\nimport { EditTextareaDefaultProps, EditTextareaPropTypes } from './propTypes';\nimport styles from './styles.module.css';\n\nconst splitLines = (val) => (val ? val.split(/\\r?\\n/) : []);\n\nexport default function EditTextarea({\n  id,\n  rows,\n  name,\n  className,\n  placeholder,\n  style,\n  readonly,\n  value,\n  defaultValue,\n  formatDisplayText,\n  onEditMode,\n  onChange,\n  onSave,\n  onBlur,\n  inputClassName\n}) {\n  const inputRef = React.useRef(null);\n  const [changeEvent, setChangeEvent] = React.useState({});\n  const [previousValue, setPreviousValue] = React.useState('');\n  const [savedText, setSavedText] = React.useState('');\n  const [editMode, setEditMode] = React.useState(false);\n\n  React.useEffect(() => {\n    if (defaultValue !== undefined) {\n      setPreviousValue(defaultValue);\n      setSavedText(defaultValue);\n    }\n  }, [defaultValue]);\n\n  React.useEffect(() => {\n    if (value !== undefined) {\n      setSavedText(value);\n      if (!editMode) {\n        setPreviousValue(value);\n      }\n    }\n  }, [value, editMode]);\n\n  const handleClick = () => {\n    if (readonly) return;\n    setEditMode(true);\n    onEditMode();\n  };\n\n  const handleBlur = (save = true) => {\n    if (inputRef.current) {\n      const { name: inputName, value: inputValue } = inputRef.current;\n      if (save && previousValue !== inputValue) {\n        onSave({\n          name: inputName,\n          value: inputValue,\n          previousValue: previousValue\n        });\n        setSavedText(inputValue);\n        setPreviousValue(inputValue);\n      } else if (!save) {\n        onChange({\n          ...changeEvent,\n          target: changeEvent.target\n            ? { ...changeEvent.target, value: previousValue }\n            : { value: previousValue }\n        });\n      }\n      setEditMode(false);\n      onBlur();\n    }\n  };\n\n  const handleKeydown = (e) => {\n    if (e.keyCode === 27 || e.charCode === 27) {\n      handleBlur(false);\n    }\n  };\n\n  const renderDisplayMode = () => {\n    const textLines = splitLines(formatDisplayText(savedText));\n    return (\n      <div\n        id={id}\n        className={classnames(\n          styles.shared,\n          styles.textareaView,\n          {\n            [styles.placeholder]: placeholder && !savedText,\n            [styles.readonly]: readonly\n          },\n          className\n        )}\n        onClick={handleClick}\n        style={{\n          ...style,\n          height: `${rows * 24 + 16}px`\n        }}\n        aria-label='display component'\n      >\n        {textLines.length > 0 ? (\n          textLines.map((text, index) => (\n            <React.Fragment key={index}>\n              <span>{text}</span>\n              <br />\n            </React.Fragment>\n          ))\n        ) : (\n          <span>{placeholder}</span>\n        )}\n      </div>\n    );\n  };\n\n  const renderEditMode = (controlled) => {\n    const sharedProps = {\n      inputRef: inputRef,\n      handleBlur: handleBlur,\n      handleKeydown: handleKeydown,\n      props: { id, rows, style, name },\n      ['aria-label']: 'textarea component'\n    };\n    return controlled ? (\n      <Textarea\n        {...sharedProps}\n        value={value}\n        onChange={(e) => {\n          setChangeEvent(e);\n          onChange(e);\n        }}\n        inputClassName={inputClassName}\n      />\n    ) : (\n      <Textarea\n        {...sharedProps}\n        defaultValue={savedText}\n        inputClassName={inputClassName}\n      />\n    );\n  };\n\n  return !readonly && editMode\n    ? renderEditMode(value !== undefined && onChange !== undefined)\n    : renderDisplayMode();\n}\n\nEditTextarea.defaultProps = EditTextareaDefaultProps;\nEditTextarea.propTypes = EditTextareaPropTypes;\n"]},"metadata":{},"sourceType":"module"}