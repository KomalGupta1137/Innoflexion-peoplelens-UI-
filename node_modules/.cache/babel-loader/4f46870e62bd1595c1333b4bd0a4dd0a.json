{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"children\", \"innerRef\"];\nimport * as React from 'react';\nimport * as ReactIs from 'react-is';\nimport { RefFindNode } from './RefFindNode';\nimport { RefForward } from './RefForward';\nexport var Ref = function Ref(props) {\n  var children = props.children,\n      innerRef = props.innerRef,\n      rest = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var child = React.Children.only(children);\n  var ElementType = ReactIs.isForwardRef(child) ? RefForward : RefFindNode;\n  var childWithProps = child && rest && Object.keys(rest).length > 0 ? /*#__PURE__*/React.cloneElement(child, rest) : child;\n  return /*#__PURE__*/React.createElement(ElementType, {\n    innerRef: innerRef\n  }, childWithProps);\n};","map":{"version":3,"sources":["Ref.tsx"],"names":["Ref","children","innerRef","rest","props","child","React","ElementType","ReactIs","childWithProps","Object"],"mappings":";;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAO,KAAP,OAAA,MAAA,UAAA;AAEA,SAAA,WAAA,QAAA,eAAA;AACA,SAAA,UAAA,QAAA,cAAA;AAGA,OAAO,IAAMA,GAAsC,GAAG,SAAzCA,GAAyC,CAAA,KAAA,EAAS;AAC7D,MAAQC,QAAR,GAAwCG,KAAxC,CAAA,QAAA;AAAA,MAAkBF,QAAlB,GAAwCE,KAAxC,CAAA,QAAA;AAAA,MAA+BD,IAA/B,GAAA,6BAAA,CAAA,KAAA,EAAA,SAAA,CAAA;;AAEA,MAAME,KAAK,GAAGC,KAAK,CAALA,QAAAA,CAAAA,IAAAA,CAAd,QAAcA,CAAd;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAPA,YAAAA,CAAAA,KAAAA,IAAAA,UAAAA,GAApB,WAAA;AACA,MAAMC,cAAc,GAAGJ,KAAK,IAALA,IAAAA,IAAiBK,MAAM,CAANA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,GAAjBL,CAAAA,GAAAA,aAAgDC,KAAK,CAALA,YAAAA,CAAAA,KAAAA,EAAhDD,IAAgDC,CAAhDD,GAAvB,KAAA;AAEA,SAAA,aAAO,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA;AAAa,IAAA,QAAQ,EAAEH;AAAvB,GAAA,EAAP,cAAO,CAAP;AAPK,CAAA","sourcesContent":["import * as React from 'react';\nimport * as ReactIs from 'react-is';\n\nimport { RefFindNode } from './RefFindNode';\nimport { RefForward } from './RefForward';\nimport { RefProps } from './utils';\n\nexport const Ref: React.FunctionComponent<RefProps> = props => {\n  const { children, innerRef, ...rest } = props;\n\n  const child = React.Children.only(children);\n  const ElementType = ReactIs.isForwardRef(child) ? RefForward : RefFindNode;\n  const childWithProps = child && rest && Object.keys(rest).length > 0 ? React.cloneElement(child, rest) : child;\n\n  return <ElementType innerRef={innerRef}>{childWithProps}</ElementType>;\n};\n"]},"metadata":{},"sourceType":"module"}