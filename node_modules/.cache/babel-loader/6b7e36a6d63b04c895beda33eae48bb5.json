{"ast":null,"code":"var _jsxFileName = \"/home/komal/Documents/Backup/FrontEnd/peoplelens_ui/src/index.tsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ApolloClient, ApolloProvider, createHttpLink, InMemoryCache } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { ThemeProvider } from '@material-ui/core';\nimport { plTheme } from './plTheme';\nimport './i18n/i18n';\nimport ReactGA from 'react-ga';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TRACKING_ID = 'UA-239895661-1';\nReactGA.initialize(TRACKING_ID);\nconst httpLink = createHttpLink({\n  uri: `${process.env.REACT_APP_API_BASE || ''}/api/gql`\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('accessToken'); // return the headers to the context so httpLink can read them\n\n  return {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    headers: { ...headers,\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  };\n});\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\n\nconst WrappedApp = /*#__PURE__*/_jsxDEV(ThemeProvider, {\n  theme: plTheme,\n  children: /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 43,\n  columnNumber: 3\n}, this);\n\nReactDOM.render(WrappedApp, document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();","map":{"version":3,"sources":["/home/komal/Documents/Backup/FrontEnd/peoplelens_ui/src/index.tsx"],"names":["React","ReactDOM","App","reportWebVitals","ApolloClient","ApolloProvider","createHttpLink","InMemoryCache","setContext","ThemeProvider","plTheme","ReactGA","TRACKING_ID","initialize","httpLink","uri","process","env","REACT_APP_API_BASE","authLink","_","headers","token","localStorage","getItem","authorization","client","link","concat","cache","WrappedApp","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SACEC,YADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,aAJF,QAKO,gBALP;AAMA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAO,aAAP;AACA,OAAOC,OAAP,MAAoB,UAApB;;AACA,MAAMC,WAAW,GAAG,gBAApB;AACAD,OAAO,CAACE,UAAR,CAAmBD,WAAnB;AAEA,MAAME,QAAQ,GAAGR,cAAc,CAAC;AAC9BS,EAAAA,GAAG,EAAG,GAAEC,OAAO,CAACC,GAAR,CAAYC,kBAAZ,IAAkC,EAAG;AADf,CAAD,CAA/B;AAIA,MAAMC,QAAQ,GAAGX,UAAU,CAAC,CAACY,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C;AACA,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAd,CAF8C,CAG9C;;AACA,SAAO;AACL;AACAH,IAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEPI,MAAAA,aAAa,EAAEH,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AAFpC;AAFJ,GAAP;AAOD,CAX0B,CAA3B;AAaA,MAAMI,MAAM,GAAG,IAAItB,YAAJ,CAAiB;AAC9BuB,EAAAA,IAAI,EAAER,QAAQ,CAACS,MAAT,CAAgBd,QAAhB,CADwB;AAE9Be,EAAAA,KAAK,EAAE,IAAItB,aAAJ;AAFuB,CAAjB,CAAf;;AAKA,MAAMuB,UAAU,gBACd,QAAC,aAAD;AAAe,EAAA,KAAK,EAAEpB,OAAtB;AAAA,yBACE,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEgB,MAAxB;AAAA,2BACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF;;AAOAzB,QAAQ,CAAC8B,MAAT,CAAgBD,UAAhB,EAA4BE,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA5B,E,CAEA;AACA;AACA;;AACA9B,eAAe","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  ApolloClient,\n  ApolloProvider,\n  createHttpLink,\n  InMemoryCache,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { ThemeProvider } from '@material-ui/core';\nimport { plTheme } from './plTheme';\nimport './i18n/i18n';\nimport ReactGA from 'react-ga';\nconst TRACKING_ID = 'UA-239895661-1';\nReactGA.initialize(TRACKING_ID);\n\nconst httpLink = createHttpLink({\n  uri: `${process.env.REACT_APP_API_BASE || ''}/api/gql`,\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('accessToken');\n  // return the headers to the context so httpLink can read them\n  return {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nconst WrappedApp = (\n  <ThemeProvider theme={plTheme}>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </ThemeProvider>\n);\nReactDOM.render(WrappedApp, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"]},"metadata":{},"sourceType":"module"}