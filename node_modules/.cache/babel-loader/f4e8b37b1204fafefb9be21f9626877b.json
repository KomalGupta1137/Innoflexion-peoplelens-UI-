{"ast":null,"code":"import { getPickersLocalization } from './utils/getPickersLocalization';\nconst ptBRPickers = {\n  // Calendar navigation\n  previousMonth: 'Mês anterior',\n  nextMonth: 'Próximo mês',\n  // View navigation\n  openPreviousView: 'Abrir próxima seleção',\n  openNextView: 'Abrir seleção anterior',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? 'Seleção de ano está aberta, alternando para seleção de calendário' : 'Seleção de calendários está aberta, alternando para seleção de ano',\n  // inputModeToggleButtonAriaLabel: (isKeyboardInputOpen: boolean, viewType: 'calendar' | 'clock') => isKeyboardInputOpen ? `text input view is open, go to ${viewType} view` : `${viewType} view is open, go to text input view`,\n  // DateRange placeholders\n  start: 'Início',\n  end: 'Fim',\n  // Action bar\n  cancelButtonLabel: 'Cancelar',\n  clearButtonLabel: 'Limpar',\n  okButtonLabel: 'OK',\n  todayButtonLabel: 'Hoje',\n  // Toolbar titles\n  // datePickerDefaultToolbarTitle: 'Select date',\n  // dateTimePickerDefaultToolbarTitle: 'Select date & time',\n  // timePickerDefaultToolbarTitle: 'Select time',\n  // dateRangePickerDefaultToolbarTitle: 'Select date range',\n  // Clock labels\n  clockLabelText: (view, time, adapter) => `Selecione ${view}. ${time === null ? 'Hora não selecionada' : `Selecionado a hora ${adapter.format(time, 'fullTime')}`}`,\n  hoursClockNumberText: hours => `${hours} horas`,\n  minutesClockNumberText: minutes => `${minutes} minutos`,\n  secondsClockNumberText: seconds => `${seconds} segundos`,\n  // Open picker labels\n  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Escolha uma data, data selecionada ${utils.format(utils.date(rawValue), 'fullDate')}` : 'Escolha uma data',\n  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Escolha uma hora, hora selecionada ${utils.format(utils.date(rawValue), 'fullTime')}` : 'Escolha uma hora',\n  // Table labels\n  timeTableLabel: 'escolha uma hora',\n  dateTableLabel: 'escolha uma data'\n};\nexport const ptBR = getPickersLocalization(ptBRPickers);","map":{"version":3,"sources":["/home/komal/Documents/Current/peoplelens_ui/node_modules/@mui/x-date-pickers/locales/ptBR.js"],"names":["getPickersLocalization","ptBRPickers","previousMonth","nextMonth","openPreviousView","openNextView","calendarViewSwitchingButtonAriaLabel","view","start","end","cancelButtonLabel","clearButtonLabel","okButtonLabel","todayButtonLabel","clockLabelText","time","adapter","format","hoursClockNumberText","hours","minutesClockNumberText","minutes","secondsClockNumberText","seconds","openDatePickerDialogue","rawValue","utils","isValid","date","openTimePickerDialogue","timeTableLabel","dateTableLabel","ptBR"],"mappings":"AAAA,SAASA,sBAAT,QAAuC,gCAAvC;AACA,MAAMC,WAAW,GAAG;AAClB;AACAC,EAAAA,aAAa,EAAE,cAFG;AAGlBC,EAAAA,SAAS,EAAE,aAHO;AAIlB;AACAC,EAAAA,gBAAgB,EAAE,uBALA;AAMlBC,EAAAA,YAAY,EAAE,wBANI;AAOlBC,EAAAA,oCAAoC,EAAEC,IAAI,IAAIA,IAAI,KAAK,MAAT,GAAkB,mEAAlB,GAAwF,oEAPpH;AAQlB;AACA;AACAC,EAAAA,KAAK,EAAE,QAVW;AAWlBC,EAAAA,GAAG,EAAE,KAXa;AAYlB;AACAC,EAAAA,iBAAiB,EAAE,UAbD;AAclBC,EAAAA,gBAAgB,EAAE,QAdA;AAelBC,EAAAA,aAAa,EAAE,IAfG;AAgBlBC,EAAAA,gBAAgB,EAAE,MAhBA;AAiBlB;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,cAAc,EAAE,CAACP,IAAD,EAAOQ,IAAP,EAAaC,OAAb,KAA0B,aAAYT,IAAK,KAAIQ,IAAI,KAAK,IAAT,GAAgB,sBAAhB,GAA0C,sBAAqBC,OAAO,CAACC,MAAR,CAAeF,IAAf,EAAqB,UAArB,CAAiC,EAAE,EAvB/I;AAwBlBG,EAAAA,oBAAoB,EAAEC,KAAK,IAAK,GAAEA,KAAM,QAxBtB;AAyBlBC,EAAAA,sBAAsB,EAAEC,OAAO,IAAK,GAAEA,OAAQ,UAzB5B;AA0BlBC,EAAAA,sBAAsB,EAAEC,OAAO,IAAK,GAAEA,OAAQ,WA1B5B;AA2BlB;AACAC,EAAAA,sBAAsB,EAAE,CAACC,QAAD,EAAWC,KAAX,KAAqBD,QAAQ,IAAIC,KAAK,CAACC,OAAN,CAAcD,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAd,CAAZ,GAAmD,sCAAqCC,KAAK,CAACT,MAAN,CAAaS,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAb,EAAmC,UAAnC,CAA+C,EAAvI,GAA2I,kBA5BtK;AA6BlBI,EAAAA,sBAAsB,EAAE,CAACJ,QAAD,EAAWC,KAAX,KAAqBD,QAAQ,IAAIC,KAAK,CAACC,OAAN,CAAcD,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAd,CAAZ,GAAmD,sCAAqCC,KAAK,CAACT,MAAN,CAAaS,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAb,EAAmC,UAAnC,CAA+C,EAAvI,GAA2I,kBA7BtK;AA8BlB;AACAK,EAAAA,cAAc,EAAE,kBA/BE;AAgClBC,EAAAA,cAAc,EAAE;AAhCE,CAApB;AAkCA,OAAO,MAAMC,IAAI,GAAGhC,sBAAsB,CAACC,WAAD,CAAnC","sourcesContent":["import { getPickersLocalization } from './utils/getPickersLocalization';\nconst ptBRPickers = {\n  // Calendar navigation\n  previousMonth: 'Mês anterior',\n  nextMonth: 'Próximo mês',\n  // View navigation\n  openPreviousView: 'Abrir próxima seleção',\n  openNextView: 'Abrir seleção anterior',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? 'Seleção de ano está aberta, alternando para seleção de calendário' : 'Seleção de calendários está aberta, alternando para seleção de ano',\n  // inputModeToggleButtonAriaLabel: (isKeyboardInputOpen: boolean, viewType: 'calendar' | 'clock') => isKeyboardInputOpen ? `text input view is open, go to ${viewType} view` : `${viewType} view is open, go to text input view`,\n  // DateRange placeholders\n  start: 'Início',\n  end: 'Fim',\n  // Action bar\n  cancelButtonLabel: 'Cancelar',\n  clearButtonLabel: 'Limpar',\n  okButtonLabel: 'OK',\n  todayButtonLabel: 'Hoje',\n  // Toolbar titles\n  // datePickerDefaultToolbarTitle: 'Select date',\n  // dateTimePickerDefaultToolbarTitle: 'Select date & time',\n  // timePickerDefaultToolbarTitle: 'Select time',\n  // dateRangePickerDefaultToolbarTitle: 'Select date range',\n  // Clock labels\n  clockLabelText: (view, time, adapter) => `Selecione ${view}. ${time === null ? 'Hora não selecionada' : `Selecionado a hora ${adapter.format(time, 'fullTime')}`}`,\n  hoursClockNumberText: hours => `${hours} horas`,\n  minutesClockNumberText: minutes => `${minutes} minutos`,\n  secondsClockNumberText: seconds => `${seconds} segundos`,\n  // Open picker labels\n  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Escolha uma data, data selecionada ${utils.format(utils.date(rawValue), 'fullDate')}` : 'Escolha uma data',\n  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Escolha uma hora, hora selecionada ${utils.format(utils.date(rawValue), 'fullTime')}` : 'Escolha uma hora',\n  // Table labels\n  timeTableLabel: 'escolha uma hora',\n  dateTableLabel: 'escolha uma data'\n};\nexport const ptBR = getPickersLocalization(ptBRPickers);"]},"metadata":{},"sourceType":"module"}