{"ast":null,"code":"import { getPickersLocalization } from './utils/getPickersLocalization';\nconst views = {\n  hours: 'le ore',\n  minutes: 'i minuti',\n  seconds: 'i secondi'\n};\nconst itITPickers = {\n  // Calendar navigation\n  previousMonth: 'Mese precedente',\n  nextMonth: 'Mese successivo',\n  // View navigation\n  openPreviousView: 'apri la vista precedente',\n  openNextView: 'apri la vista successiva',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? \"la vista dell'anno è aperta, passare alla vista del calendario\" : \"la vista dell'calendario è aperta, passare alla vista dell'anno\",\n  // inputModeToggleButtonAriaLabel: (isKeyboardInputOpen: boolean, viewType: 'calendar' | 'clock') => isKeyboardInputOpen ? `text input view is open, go to ${viewType} view` : `${viewType} view is open, go to text input view`,\n  // DateRange placeholders\n  start: 'Inizio',\n  end: 'Fine',\n  // Action bar\n  cancelButtonLabel: 'Cancellare',\n  clearButtonLabel: 'Sgomberare',\n  okButtonLabel: 'OK',\n  todayButtonLabel: 'Oggi',\n  // Toolbar titles\n  // datePickerDefaultToolbarTitle: 'Select date',\n  // dateTimePickerDefaultToolbarTitle: 'Select date & time',\n  // timePickerDefaultToolbarTitle: 'Select time',\n  // dateRangePickerDefaultToolbarTitle: 'Select date range',\n  // Clock labels\n  clockLabelText: (view, time, adapter) => `Seleziona ${views[view]}. ${time === null ? 'Nessun orario selezionato' : `L'ora selezionata è ${adapter.format(time, 'fullTime')}`}`,\n  hoursClockNumberText: hours => `${hours} ore`,\n  minutesClockNumberText: minutes => `${minutes} minuti`,\n  secondsClockNumberText: seconds => `${seconds} secondi`,\n  // Open picker labels\n  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Scegli la data, la data selezionata è ${utils.format(utils.date(rawValue), 'fullDate')}` : 'Scegli la data',\n  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Scegli l'ora, l'ora selezionata è ${utils.format(utils.date(rawValue), 'fullTime')}` : \"Scegli l'ora\",\n  // Table labels\n  timeTableLabel: 'scegli un ora',\n  dateTableLabel: 'scegli una data'\n};\nexport const itIT = getPickersLocalization(itITPickers);","map":{"version":3,"sources":["/home/komal/Documents/Backup/FrontEnd/peoplelens_ui/node_modules/@mui/x-date-pickers/locales/itIT.js"],"names":["getPickersLocalization","views","hours","minutes","seconds","itITPickers","previousMonth","nextMonth","openPreviousView","openNextView","calendarViewSwitchingButtonAriaLabel","view","start","end","cancelButtonLabel","clearButtonLabel","okButtonLabel","todayButtonLabel","clockLabelText","time","adapter","format","hoursClockNumberText","minutesClockNumberText","secondsClockNumberText","openDatePickerDialogue","rawValue","utils","isValid","date","openTimePickerDialogue","timeTableLabel","dateTableLabel","itIT"],"mappings":"AAAA,SAASA,sBAAT,QAAuC,gCAAvC;AACA,MAAMC,KAAK,GAAG;AACZC,EAAAA,KAAK,EAAE,QADK;AAEZC,EAAAA,OAAO,EAAE,UAFG;AAGZC,EAAAA,OAAO,EAAE;AAHG,CAAd;AAKA,MAAMC,WAAW,GAAG;AAClB;AACAC,EAAAA,aAAa,EAAE,iBAFG;AAGlBC,EAAAA,SAAS,EAAE,iBAHO;AAIlB;AACAC,EAAAA,gBAAgB,EAAE,0BALA;AAMlBC,EAAAA,YAAY,EAAE,0BANI;AAOlBC,EAAAA,oCAAoC,EAAEC,IAAI,IAAIA,IAAI,KAAK,MAAT,GAAkB,gEAAlB,GAAqF,iEAPjH;AAQlB;AACA;AACAC,EAAAA,KAAK,EAAE,QAVW;AAWlBC,EAAAA,GAAG,EAAE,MAXa;AAYlB;AACAC,EAAAA,iBAAiB,EAAE,YAbD;AAclBC,EAAAA,gBAAgB,EAAE,YAdA;AAelBC,EAAAA,aAAa,EAAE,IAfG;AAgBlBC,EAAAA,gBAAgB,EAAE,MAhBA;AAiBlB;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,cAAc,EAAE,CAACP,IAAD,EAAOQ,IAAP,EAAaC,OAAb,KAA0B,aAAYnB,KAAK,CAACU,IAAD,CAAO,KAAIQ,IAAI,KAAK,IAAT,GAAgB,2BAAhB,GAA+C,uBAAsBC,OAAO,CAACC,MAAR,CAAeF,IAAf,EAAqB,UAArB,CAAiC,EAAE,EAvB5J;AAwBlBG,EAAAA,oBAAoB,EAAEpB,KAAK,IAAK,GAAEA,KAAM,MAxBtB;AAyBlBqB,EAAAA,sBAAsB,EAAEpB,OAAO,IAAK,GAAEA,OAAQ,SAzB5B;AA0BlBqB,EAAAA,sBAAsB,EAAEpB,OAAO,IAAK,GAAEA,OAAQ,UA1B5B;AA2BlB;AACAqB,EAAAA,sBAAsB,EAAE,CAACC,QAAD,EAAWC,KAAX,KAAqBD,QAAQ,IAAIC,KAAK,CAACC,OAAN,CAAcD,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAd,CAAZ,GAAmD,yCAAwCC,KAAK,CAACN,MAAN,CAAaM,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAb,EAAmC,UAAnC,CAA+C,EAA1I,GAA8I,gBA5BzK;AA6BlBI,EAAAA,sBAAsB,EAAE,CAACJ,QAAD,EAAWC,KAAX,KAAqBD,QAAQ,IAAIC,KAAK,CAACC,OAAN,CAAcD,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAd,CAAZ,GAAmD,qCAAoCC,KAAK,CAACN,MAAN,CAAaM,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAb,EAAmC,UAAnC,CAA+C,EAAtI,GAA0I,cA7BrK;AA8BlB;AACAK,EAAAA,cAAc,EAAE,eA/BE;AAgClBC,EAAAA,cAAc,EAAE;AAhCE,CAApB;AAkCA,OAAO,MAAMC,IAAI,GAAGjC,sBAAsB,CAACK,WAAD,CAAnC","sourcesContent":["import { getPickersLocalization } from './utils/getPickersLocalization';\nconst views = {\n  hours: 'le ore',\n  minutes: 'i minuti',\n  seconds: 'i secondi'\n};\nconst itITPickers = {\n  // Calendar navigation\n  previousMonth: 'Mese precedente',\n  nextMonth: 'Mese successivo',\n  // View navigation\n  openPreviousView: 'apri la vista precedente',\n  openNextView: 'apri la vista successiva',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? \"la vista dell'anno è aperta, passare alla vista del calendario\" : \"la vista dell'calendario è aperta, passare alla vista dell'anno\",\n  // inputModeToggleButtonAriaLabel: (isKeyboardInputOpen: boolean, viewType: 'calendar' | 'clock') => isKeyboardInputOpen ? `text input view is open, go to ${viewType} view` : `${viewType} view is open, go to text input view`,\n  // DateRange placeholders\n  start: 'Inizio',\n  end: 'Fine',\n  // Action bar\n  cancelButtonLabel: 'Cancellare',\n  clearButtonLabel: 'Sgomberare',\n  okButtonLabel: 'OK',\n  todayButtonLabel: 'Oggi',\n  // Toolbar titles\n  // datePickerDefaultToolbarTitle: 'Select date',\n  // dateTimePickerDefaultToolbarTitle: 'Select date & time',\n  // timePickerDefaultToolbarTitle: 'Select time',\n  // dateRangePickerDefaultToolbarTitle: 'Select date range',\n  // Clock labels\n  clockLabelText: (view, time, adapter) => `Seleziona ${views[view]}. ${time === null ? 'Nessun orario selezionato' : `L'ora selezionata è ${adapter.format(time, 'fullTime')}`}`,\n  hoursClockNumberText: hours => `${hours} ore`,\n  minutesClockNumberText: minutes => `${minutes} minuti`,\n  secondsClockNumberText: seconds => `${seconds} secondi`,\n  // Open picker labels\n  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Scegli la data, la data selezionata è ${utils.format(utils.date(rawValue), 'fullDate')}` : 'Scegli la data',\n  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Scegli l'ora, l'ora selezionata è ${utils.format(utils.date(rawValue), 'fullTime')}` : \"Scegli l'ora\",\n  // Table labels\n  timeTableLabel: 'scegli un ora',\n  dateTableLabel: 'scegli una data'\n};\nexport const itIT = getPickersLocalization(itITPickers);"]},"metadata":{},"sourceType":"module"}